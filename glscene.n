// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import gl
import math
import constraint 
import input
import text_tagged

class Scene extends Device{

	clipboard = Clipboard.new()
	mouse = Mouse.new()
	key = Key.new()
	//midi = Midi.new()

	m_camera = mat4()

	// set up a constraint solver
	solver = CS.SimplexSolver.new()

	// when we are adding a node we get called
	onAddChild(node){
		// lets process some constraints
		var proto = node
		while(proto && proto.__constraints__){
			if(proto.hasOwnProperty('__constraints__')){
				for(var c from proto.__constraints__){
					var constraint = CS.ASTNodeToConstraint(node, c)
					var storage = node.__constraint_store__ || (node.__constraint_store__ = [])
					storage.push(constraint)
					solver.addConstraint(constraint)
				}
			}
			proto = Object.getPrototypeOf(proto)
		}
		if(!layout_cb) layout_cb = setImmediate(onLayout.bind(this))
	}

	onLayout(){
		layout_cb = undefined
		solver.solve()
		// alright so.. how do we get those pesky values to update?
		redraw()
	}

	// allright so lets solve our layout..
	m_view = mat4.identity()//mat4.RT(0,0,0, 0,0,3)
	draw:(parent, sec){
		vec3 f = fill
		clearAll(f)

		//h = frame.w * 0.5 
		//h = frame.h
		if(perspective){
			m_proj = mat4.perspective(perspective, frame.w/frame.h, -1, 1)			
		}
		else{
			m_proj = mat4.ortho(0, frame.w / frame.ratio, 0, frame.h / frame.ratio, -1000, 1000)
		}
		//m_proj = mat4.perspective(-90deg, -1, -1000, 1000) * mat4.S(0.01,0.01,0.01)
		// silently assign camera matrix
		__m_camera = mat4 m_view * mat4 m_proj 
		m_childworld = mat4.identity()
		drawChildren(this, sec) 
	}
}

// a layer with matrices
class Layer extends Draw{

	// forward the mouse object
	clipboard = Scene.clipboard
	mouse = Scene.mouse
	midi = Scene.midi
	key = Scene.key
	// define object types
	mesh = vec2Rect(0, 0, 1, 1)

	// type them, otherwise we cant use it in the compiler
	m_world = mat4()
	m_mesh = mat4.identity()
	m_child = mat4.identity()

	vertex: mesh[] * (m_mesh * m_world * device.m_camera)

	p: pixel mesh[]
	hp: 2.*(pixel mesh[] -.5)

    beforeMatrix:(){
    }

    drawSelf:(sec){
    	this{}
    }

	draw:(parent, sec){
		drawn = true
		mat4 m_parent = parent.m_childworld
		// set our matrix
		beforeMatrix()
        var dx = ax*w, dy = ay*h, dz = az*d
		mat4 m_local = mat4.TSRT(-dx,-dy,-dz ,sx,sy,sz, rx,ry,rz, x+dx,y+dy,z+dz)
		// scale our mesh
		m_mesh = mat4.S(w, h, d)

		// generate our world matrix
		m_world = m_local * m_parent

		//if(__proxy__ == 72)console.log(m_local)

		// draw ourselves
		drawSelf(sec)

		// now lets make these things work
		if(children){
			//console.log(x,y,__proxy__,w,h)
			m_childworld = m_child * m_world
			if(!skip_children)drawChildren(this, sec)
		}
	}
	// anchor
	ax = 0.5
	ay = 0.5
	az = 0
	// rotation
	rx = 0
	ry = 0
	rz = 0
	// scale
	sx = 1
	sy = 1
	sz = 1
	// coordinates
	x = 0
	y = 0
	z = 0
	// size
	w = 100
	h = 100
	d = 0
}

class Text extends Layer{
	load(TaggedTextImpl)

	constructor(){
		Layer::constructor()
		TaggedTextImpl::constructor()
	}
	vertex: (mesh[].xy+vec2(text_x, text_y)) * (m_world * device.m_camera)
	font_size = 20
	u_boldness= 0.8
	u_color = #white
}

class DebugLayerImpl{
	constructor(){
		debug_mesh = vec3[]()
	}
	
	clearDebug(){
		debug_mesh.length = 0
	}

	addDebug(x,y,w = 2,h = 2,col = 0){
		vec3[] mesh = debug_mesh
		var o = mesh.quad.length++
		mesh.quad_tl[o] = vec2(x,y)
		mesh.quad_tr[o] = vec2(x+w,y)
		mesh.quad_bl[o] = vec2(x,y+h)
		mesh.quad_br[o] = vec2(x+w,y+h)
		mesh.quad[o].z = col
	}

	debug_vertex: debug_mesh[].xy * (m_world * device.m_camera)
	debug_pixel:(){
		int dbg = debug_mesh[].z
		if(dbg == 0) return #red
		if(dbg == 1) return #green
		if(dbg == 2) return #blue
		return #orange
	}
}
