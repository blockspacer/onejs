import math
import glscene
import codeview
import edit
import text_chunked

class CodeEdit extends Layer{

	class CodeFormatter{
		load(MemoryTaggedTextImpl)
		load(CodeViewTypes)
		load(CodeViewImpl)
		constructor(){
			text_initialized = true
			MemoryTaggedTextImpl::constructor()
			CodeViewImpl::constructor()
		}
		format(ast){
			this.ast = ast
		}
	}

	load(ChunkedTextLayerImpl)
	load(CodeViewTypes)
	load(CodeViewImpl)
	load(EditImpl)
	
	processInsert(lo, hi, text){
		var cdelta = 0
		if(text == '"'){
			if(charCodeAt(lo) == 34) text = '', cdelta = 1
			else text +='"', cdelta=-1
		}
		else if(text == "'"){
			if(charCodeAt(lo) == 39) text = '', cdelta = 1
			else text +="'", cdelta=-1
		}
		else if(text == ')'){
			if(charCodeAt(lo) == 41) text = '', cdelta = 1
		}
		else if(text == ']'){
			if(charCodeAt(lo) == 93) text = '', cdelta = 1
		}
		else if(text == '}'){
			if(charCodeAt(lo) == 125) text = '', cdelta = 1
		}
		else if(text == '('){
			cdelta = -1
			text += ')'
		}
		else if(text == '['){
			cdelta = -1
			text += ']'
		}
		else if(text == '{'){
			if(lo != hi){
				// do something special
			}
			cdelta = -1
			text += '}'
		}
		else if(text == '\n'){ // autoindent code
			var i = hi
			var state = 0
			var indent = 0
			var split = 0
			while(charCodeAt(i) == 9){
				i++
				indent--
			}
			if(charCodeAt(i) == 125 && charCodeAt(i-1) == 123){
				i++, split = 1
			}
			while(i<char_count){
				var code = charCodeAt(i)
				if(state == 0 && code == 123) indent--
				if(state == 1){
					if(code == 9 || code == 125) indent++
					else break
				}
				if(code == 10) state = 1
				i++
			}
			if(indent>0){
				if(split){
					text += Array(indent+2).join('\t') + '\n' + Array(indent+1).join('\t')
					cdelta = -1 - indent
				}
				else{
					text += Array(indent+1).join('\t')
				}
			}
		}
		return [text, cdelta]
	}

	stripNextOnBackspace(pos){
		ch = charCodeAt(pos)
		if(ch == 91 && charCodeAt(pos+1) == 93) return true
		if(ch == 123 && charCodeAt(pos+1) == 125) return true
		if(ch == 40 && charCodeAt(pos+1) == 41) return true
		return false
	}
	
	change(){
		was_cursor = false
		if(change == Change.keyPress || change == Change.delete || change == Change.clipboard){
			was_delete = change == Change.delete
			was_cursor = change == Change.clipboard // dont delay reformat on paste
			delay_update = 0
			if(step_timeout) clearTimeout(step_timeout)
			step_timeout = thisTimeout(parseStep,0)
		}
		// if its an undo, 
		if(change == Change.undoRedo){ // set delay to cursor press
			delay_update = parseStep
		}
	}

	cursor(){
		if(delay_update){
			was_cursor = true
			was_delete = false
			delay_update()
			delay_update = 0
		}
	}

	parseStep(){
		var dt = Date.now()
		step_serialized = serializeText()
		// okay.. so we parse it, we get an error. now what.
		var dump = step_serialized.replace(/[\s\r\n]/g,function(f){
			return '\\'+f.charCodeAt(0)
		})
		step_ast = parseLive(step_serialized)
		//console.log(AST.toDump(step_ast))
		//console.log('----parseStep! '+(Date.now()-dt))
		step_timeout = thisTimeout(astgenStep,0)
	}

	astgenStep(){
		var dt = Date.now()
		code_formatter.setSize(step_serialized.length)
		code_formatter.clear()
		code_formatter.ast = step_ast
		//console.log(code_formatter.serializeText())
		//console.log('astgenStep! '+(Date.now()-dt))
		step_timeout = thisTimeout(diffStep,0)
	}

	diffStep(){
		var dt = Date.now()
		// lets diff our code_formatter.output
		// against our textbuffer, whilst updating colors
		// and then we remove/insert the delta.
		// ok lets first try to do it wholesale
		var range = diffTags(code_formatter.output)
		if(range){ // remove a range, and insert a range
			var delta = 0
			// if what we do is essentially undo the last action, dont do it
			var last = undo_stack[undo_stack.length-1]
			
			// lets check if we inserted a space, and now its being removed
			function next(){
				// first we remove
				var rem_delta =  0
				if(range.my_start<=range.my_end){
					rem_delta += range.my_end + 1 - range.my_start
				}
				var add_delta = 0
				if(range.other_start <= range.other_end){
					add_delta += range.other_end + 1 - range.other_start
				}
				var delta = add_delta - rem_delta
				// if we are input driven, we only accept positive add
				if(was_cursor || delta == 0 || !was_delete && delta > 0){
					undo_group++
					cursors.markDelta()
					if(rem_delta){
						addUndoInsert(range.my_start, range.my_end+1)
						removeText(range.my_start, range.my_end+1)
						// lets fetch what we are removing
					}
					if(add_delta){
						var inslice = code_formatter.output.slice(range.other_start, range.other_end+1)

						// lets see what we are inserting
						insertText(range.my_start, inslice)
						addUndoDelete(range.my_start, range.my_start + inslice.length)
					}
					cursors.moveDelta(range.my_start, add_delta - rem_delta)
				}
				else if(!was_cursor){
					delay_update = next
				}
			}
			next()
		}
		//console.log(range)
		//console.log('diffStep! '+(Date.now()-dt))
		step_timeout  = thisTimeout(applyStep,0)
	}

	applyStep(){
		// and now we update it.

		//console.log('applyStep!')
		step_timeout = 0
	}

	constructor(){
		Layer::constructor()
		ChunkedTextLayerImpl::constructor()
		CodeViewImpl::constructor()
		EditImpl::constructor()
		_sortChunks()

		code_formatter = CodeFormatter.new()
		
	}
}