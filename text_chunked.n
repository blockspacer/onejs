// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import text_marked
import glscene

// Memory output for text buffer 
class MemoryTaggedTextImpl{
	constructor(){
		char_count = 0
	}

	setSize(size){
		if(!output || output.length < size*1.5){
			//console.log('here')
			output = vec3[size*2]()
		}
	}

	space(t){
		if(t === undefined) return string(' ')
		return string(Array(t+1).join(' '))
	}
	tab(t){
		if(t === undefined) return string('\t')
		return string(Array(t+1).join('\t'))
	}
	newline(t){
		if(t === undefined) return string('\n')
		return string(Array(t+1).join('\n'))
	}
	code(c){}

	allocText(){}

	clear(){
		char_count = 0
	}

	charCodeAt(off){
		vec3[] out = output
		return out[off].z
	}
	
	serializeText(){
		var s = ''
		vec3[] out = output
		for(var i = 0;i<char_count;i++){
			s += String.fromCharCode(out[i].z)
		}
		return s
	}

	done(){
		if(output)output.length = char_count
	}

	string(text){
		var length = text.length
		vec3[] out = output
		var o = char_count
		for(var i = 0; i < length; i++){
			var unicode = text.charCodeAt(i)
			out[o + i] = vec3(tag_x,tag_y,unicode)
		}
		char_count += length
		return length
	}
}

// chunked text behaves like text
class ChunkedTextLayerImpl{
	// use layer matrices

	dontProxy('default_alloc', 'chunk_lines',
		'text_initialized','chunk_list','line_height',
		'cache_chunk','append_chunk','add_y','char_count')
	//dump = 1
	// load up the renderer
	load(MarkedTextLayerImpl)
	load(DebugLayerImpl)

	chunk_id = 0
	// this thing holds the data, but not the rendering
	class Chunk extends WorkerProxy{
		load(MarkedTextLayerImpl)
		dontProxy('char_offset')
		y = 0
		char_offset = 0

		get font_size(){
			return parent.font_size
		}
		get line_spacing() ->parent.line_spacing
		constructor(parent){
			this.parent = parent
			first_add_x = 0
			MarkedTextLayerImpl::constructor(parent)
			if(!parent.chunk_list)parent.chunk_list = []
			chunk_id = parent.chunk_list.push(this) - 1
		}
		$constructor:(){
			if(!parent.chunk_list)parent.chunk_list = []
			parent.chunk_list.push(this)
		}
		$flagDirty:(){
			parent.redraw()
		}
	}

	// todo make this windowed by scroll 
	drawSelf:(sec){
		// draw markers
		text_y = 0
		this{
			pixel:marker_paint()
			vertex:marker_vertex
		}

		// lets draw our text
		for(var chunk from chunk_list){
			mesh = chunk.mesh
			tag_mesh = chunk.tag_mesh
		 	text_y = chunk.y
			this{}
		}
		// lets draw our cursors
		text_y = 0
		this{
			pixel:cursor_paint()
			vertex:cursor_vertex
		}
		this{
			pixel:debug_pixel()
			vertex:debug_vertex
		}
	}

	chunk_count = 1000

	get char_count(){
		return __char_count
	}

	set char_count(v){
		__char_count = v
	}

	constructor(){
		MarkedTextLayerImpl::constructor()
		DebugLayerImpl::constructor()
		console.log('hea', font_size)
		// create a new last_chunk to start growing
		append_chunk = this.Chunk.new(this)
		append_chunk.allocText(chunk_count)
		__char_count = 0
		add_y = 0
		sort_chunks = 0
		//last_chunk.style = style
	}

	offsetFromPos(x, y){
		// scan the chunks by y pos
		if(!cache_chunk) cache_chunk = chunk_list[0]
		var last, prev
		var ct = 0
		
		while(last != cache_chunk){
			if(ct++>1000){
				console.log(cache_chunk.y)
				return console.log('INFINITE LOOP')
			}
			last = prev
			prev = cache_chunk
			var ret = cache_chunk.offsetFromPos(x, y - cache_chunk.y)
			//console.log(cache_chunk, ret)
			//console.log(ret)
			if(ret == -1 || ret == -2){ // to the left of self or top
				cache_chunk = chunk_list[cache_chunk.chunk_id -1]
				if(!cache_chunk) return 0
				if(cache_chunk == last) return cache_chunk.char_offset + cache_chunk.char_count
			}
			else if(ret == -3 || ret == -4){ // to the bottom
				cache_chunk = chunk_list[cache_chunk.chunk_id +1]
				if(!cache_chunk) return char_count
				if(cache_chunk == last) return cache_chunk.char_offset 
			}
			else return ret + cache_chunk.char_offset
		}

		return 0
	}

	cursorRect(off){
		var chunk = findChunk(off)
		var rect = chunk.cursorRect(off - chunk.char_offset)		
		rect.y += chunk.y
		return rect
	}

	charCoords(off){
		var chunk = findChunk(off)
		var b = chunk.charCoords(off - chunk.char_offset)
		// we need to find the actual baseline for this 
		b.y += chunk.y
		return b
	}
	// we expose the Text api onto subchunks
	charCodeAt(off){
		// we have to find the right character tag
		var chunk = findChunk(off)
		return chunk.charCodeAt(off - chunk.char_offset)
	}

	findChunk(off){
		// otherwise we scan up or down from cache_chunk
		if(!cache_chunk) cache_chunk = chunk_list[0]
		while(cache_chunk && off < cache_chunk.char_offset){
			cache_chunk = chunk_list[cache_chunk.chunk_id -1]
		}
		while(cache_chunk && off >= cache_chunk.char_offset + cache_chunk.char_count){
			cache_chunk = chunk_list[cache_chunk.chunk_id + 1]
		}
		if(!cache_chunk) cache_chunk = chunk_list[chunk_list.length - 1]
		return cache_chunk
	}

	allocText(length){}

	newChunk(force){
		if(force || append_chunk.char_count > chunk_count){
			var new_chunk = chunk_list[0] && chunk_list[0].char_offset === -Infinity?chunk_list[0]:this.Chunk.new(this)
			// complete last_chunk
			var addx
			if(!append_chunk){
				new_chunk.char_offset = 0
				new_chunk.text_h = 0
				new_chunk.y = 0
				add_y = 0
				addx = 0
			}
			else{
				add_y += append_chunk.block_y
				addx = append_chunk.add_x
				new_chunk.char_offset = append_chunk.char_count + append_chunk.char_offset
				new_chunk.y = add_y// - new_chunk.line_height
			}
			//new_chunk.start_y = 0
			new_chunk.allocText(chunk_count)
			new_chunk.first_add_x = new_chunk.add_x = addx
			append_chunk = new_chunk
		}
	}

	serializeText(start = 0, end = char_count){
		var str = ''
		for(var cs = findChunk(start); cs && cs.char_offset < end; cs = chunk_list[cs.chunk_id+1]){
			// now lets mark it from the right start t oend
			var cstart = max(start, cs.char_offset) - cs.char_offset
			var cend = min(end - cs.char_offset, cs.char_count)
			str += cs.serializeText(cstart, cend)
		}
		return str
	}

	serializeTags(start, end){
		var tags = vec3[end - start]()
		var off = 0
		for(var cs = findChunk(start); cs && cs.char_offset < end; cs = chunk_list[cs.chunk_id+1]){
			// now lets mark it from the right start t oend
			var cstart = max(start, cs.char_offset) - cs.char_offset
			var cend = min(end - cs.char_offset, cs.char_count)
			cs.serializeTags(cstart, cend, tags, off)
			off += cend - cstart
		}
		return tags
	}

	newline(t){
		newChunk()
		var s = append_chunk.newline(t)
		char_count += s
		append_chunk.text_h += append_chunk.line_height
		return s
	}

	tab(t){
		newChunk()
		var s = append_chunk.tab(t)
		char_count += s
		return s
	}

	space(t){
		newChunk()
		var s = append_chunk.space(t)
		char_count += s
		return s
	}

	string(text){
		var length = text.length
		var chars = 0
		vec3[] tags = text
		var istags 
		if(text._t_) istags = true
		// alright lets convert some text babeh!
		for(var i = 0; i < length; i++){
			var unicode = istags?tags[i].z:text.charCodeAt(i)

			// parse inline tags
			if(inline_tags && (unicode == 36||unicode==37)){
				var t = i
				var next
				while((next = text.charCodeAt(t+1)) >= 48 && next <=57){
					t++
				}
				if(i != t){
					var out = parseInt(text.slice(i+1, i-t))
					if(unicode == 36) tag_x = out
					else tag_y = out
					i = t
					continue
				}
			}
			if(unicode == 32){ //space
				newChunk()
				var s = append_chunk.space(t)
				chars += s
				continue
			}
			if(unicode == 10){ // newline
				newChunk()
				var s = append_chunk.newline(t)
				append_chunk.text_h += append_chunk.line_height
				chars += s
				continue
			}
			if(unicode == 9){ // tab
				newChunk()
				var s = append_chunk.tab(t)
				chars += s
				continue
			}
			var glyph = glyphy_info.glyphs[unicode]
			if(!glyph){
				newChunk()
				var s = append_chunk.space(t)
				chars += s
				continue
			}
			// lets add some vertices
			newChunk()
			append_chunk.addChar(glyph)
			chars++

			if(istags) append_chunk.tagChar(1, tags[i].x, tags[i].y, unicode)
			else append_chunk.tagChar(1, tag_x, tag_y, unicode)

			if(append_chunk.add_y > append_chunk.text_h) append_chunk.text_h = append_chunk.add_y	
		}
		char_count += chars

		return chars
	}
	
	// ok lets first do a clear all, start from scratch kinda thing.
	addMarkers(start, end, data){
		if(end < start){
			var t = end
			end = start
			start = t
		}
		var chunks = []
		var array = []
		// first we are going to build the marker extents array
		for(var cs = findChunk(start); cs && cs.char_offset < end; cs = chunk_list[cs.chunk_id+1]){
			// now lets mark it from the right start t oend
			var array_start = array.length
			var cstart = max(start, cs.char_offset) - cs.char_offset
			var cend = min(end - cs.char_offset, cs.char_count)
			cs.getMarkers(cstart, cend, array, cs.y)
			chunks.push(cs, array_start, array.length)
			cs.setTagsMarker(cstart, cend)
		}
		// then we write all the markers into the chunks
		for(var i = 0; i < chunks.length; i += 3){
			var chunk = chunks[i]
			var jstart = chunks[i+1]
			var jend = chunks[i+2]
			for(var j = jstart; j < jend; j++){
				addMarker(array[j-1], array[j], array[j+1], data, 1)
			}
		}
	}

	clearMarkers(){
		MarkedTextLayerImpl::clearMarkers(1)
		for(var chunk from chunk_list){
			chunk.clearTagsMarker()
		}
	}

	_sortChunks(){
		chunk_list.sort(function(a,b){
			return a.char_offset<b.char_offset?-1:1
		})
		cache_chunk = undefined
		var c = 0, id = 0
		clearDebug()
		//console.log('--list--')
		for(var i, chunk from chunk_list){
			chunk.chunk_id = i
			if(chunk.char_offset !== -Infinity){
				chunk.char_offset = c
				c += chunk.char_count
				//addDebug(chunk.first_add_x, chunk.y,1,line_height)
			}
			//console.log(i, chunk.y, chunk.char_offset, chunk.char_count, chunk.serializeText())
		}
		char_count = c
	}

	diffTags(tags){
		// lets first scan from the top
		vec3[] other_tags = tags
		var other_start = 0
		var other_end = tags.length - 1
		var my_start = 0
		var my_end = char_count - 1
 		
		for(cs = findChunk(0); cs && cs.char_offset < my_end; cs = chunk_list[cs.chunk_id+1]){
			// now lets mark it from the right start 
			vec4[] my_tags = cs.tag_mesh
			// lets process the chunk
			for(var i = 0, l = my_tags.quad.length; i<l; i++, my_start++, other_start++){
				if(my_tags.quad[i].z != other_tags[other_start].z){
					break
				}
				if(my_tags.quad[i].x != other_tags[other_start].x || 
					my_tags.quad[i].y = other_tags[other_start].y){
					my_tags.quad[i].x = other_tags[other_start].x
					my_tags.quad[i].y = other_tags[other_start].y
					my_tags.length += 0
				}
			}
			if(i<l) break
		}
		if(my_start == my_end+1) return
		// now lets start at the end
		for(var cs = chunk_list[chunk_list.length - 1]; cs && cs.char_offset+cs.char_count>=my_start; cs = chunk_list[cs.chunk_id-1]){
			vec4[] my_tags = cs.tag_mesh
			for(var i = my_tags.quad.length - 1; i>=0 && my_end>=my_start && other_end>=other_start; i--, my_end--, other_end--){
				if(my_tags.quad[i].z != other_tags[other_end].z){
					break
				}
				if(my_tags.quad[i].x != other_tags[other_end].x || 
					my_tags.quad[i].y = other_tags[other_end].y){
					my_tags.quad[i].x = other_tags[other_end].x
					my_tags.quad[i].y = other_tags[other_end].y
					my_tags.length += 0
				}
			}
			if(i>=0) break
		}
		// ok so this thing fails to work with similar centers.

		return {my_start:my_start, my_end:my_end, other_start:other_start, other_end:other_end}
	}

	// lets start with removeText
	removeText(start, end){
		if(end < start){
			var t = end
			end = start
			start = t
		}
		var addx, addy
		for(var cs = findChunk(start); cs; cs = chunk_list[cs.chunk_id+1]){
			var cstart = max(start, cs.char_offset) - cs.char_offset
			var cend = max(cstart, min(end - cs.char_offset, cs.char_count))

			cs.y = addy !== undefined? addy : cs.y
			if(cstart != cend || addx != cs.first_add_x)
				cs.removeText(cstart, cend, addx)
			//for debugging
			if(cstart == 0 && addx !== undefined) cs.first_add_x = addx
			// the cases. if end goes beyond, we need to get the last from our chunk
			addx = cs.add_x
			addy = cs.y + cs.block_y
			if(!cs.char_count){ // move chunk to the spare chunkset
				// only do it if we arent the last
				if(chunk_list[cs.chunk_id - 1] && chunk_list[cs.chunk_id - 1].char_offset !== -Infinity ||
				chunk_list[cs.chunk_id + 1] && chunk_list[cs.chunk_id+1].char_offset!== -Infinity){
					cs.char_offset = -Infinity
					// we are the first
					var first = false
					var i = cs.chunk_id - 1
					while(chunk_list[i] && chunk_list[i].char_offset === -Infinity)i--;
					if(i<0) addy = 0
				}
				else{
					cs.add_x = 0
				}
			}
		}
		_sortChunks()
	}

	insertText(index, text){
		// ok we find a chunk, then we figure out where to append
		var chunk, cs = chunk = findChunk(index)
		var max_chunk = chunk_list.length
		var off = 0
		var len
		var chunk_off = index - cs.char_offset
		// split chunk
		if(chunk_off == cs.char_count || chunk_off == 0){
			// what if there is no previous?
			if(chunk_off == 0) cs = chunk_list[cs.chunk_id - 1]
			if(cs && cs.char_offset !== -Infinity){
				// set the local appends
				add_y = cs.y //+ cs.block_y
				append_chunk = cs
				// go and append
				off = cs.char_offset + cs.char_count
				off += len = string(text)
				cs = chunk_list[cs.chunk_id + 1]
			} 
			else{ // insert at the beginning
				// how do we do it.
				if(chunk.char_count){
					cs = chunk
					append_chunk = undefined
					newChunk(true)
					off += len = string(text)
				}
				else{
					append_chunk = chunk
					off += len = string(text)
					cs = undefined
				}
			}
		}
		else if(chunk_off != 0){
			// first we end the chunk at the offset
			var start = index - cs.char_offset
			var old_len = cs.char_count
			var split_tags = cs.serializeTags(start, old_len)
			cs.truncateText(start)
			off = cs.char_offset + cs.char_count
			add_y = cs.y
			append_chunk = cs
			// lets add a new chunk
			off += len = string(text)
			if(split_tags.length){
				newChunk(true)
				// now we have to add the last part of what we truncated
				off += string(split_tags)
			}
			cs = chunk_list[cs.chunk_id + 1]
		}
		// just append
		// process the rest of the chunks
		add_y += append_chunk.block_y
		var addx = append_chunk.add_x, addy = add_y
		while(cs && cs.chunk_id < max_chunk){
			cs.char_offset = off
			cs.y = addy
			if(addx != cs.first_add_x){
				cs.removeText(0, 0, addx)
				cs.first_add_x = addx
			}
			addx = cs.add_x
			addy = cs.y + cs.block_y
			off += cs.char_count
			cs = chunk_list[cs.chunk_id + 1]
		}
		_sortChunks()
		return len
	}

	// lets spit out all the chunks we have
	debugChunks(){
		for(var i, chunk from chunk_list){
			console.log(i, chunk.y, chunk.text_h, chunk.char_offset, chunk.char_count, chunk.serializeText())
		}
	}
}