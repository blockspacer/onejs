// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import glenums

class DepTraceGLSL extends AST.Walk{

	// unsupported keys
	ForIn( n ){ throw new Error('Cannot use for in in a shader, use for from') }
	ForOf( n ){ throw new Error('Cannot use for of in a shader, use for from') }
	Struct( n ){ throw new Error('Cannot use struct in a shader function') }
	Comprehension( n ){ throw new Error('Cannot use a comprehension in a shader function') }
	ThisCall( n ){ throw new Error('Cannot use this in a shader function') }
	Template( n ){ throw new Error('Cannot use templates in a shader function') }
	Throw( n ){ throw new Error('Cannot use throw in a shader function') }
	Try( n ){ throw new Error('Cannot use try in a shader function') }
	Enum( n ){ throw new Error('Cannot use enum in a shader function') }
	Define( n ){ throw new Error('Cannot define in a shader function') }
	New( n ){ throw new Error('Cannot use new in a shader function') }
	Nest( n ){ throw new Error('Cannot use nesting syntax in a shader function') }
	Class( n ){ throw new Error('Cannot define a class in a shader function') }
	Quote( n ){ throw new Error('Cannot use quote in a shader function') }
	Rest( n ){ throw new Error('Cannot use rest ... in a shader function') }
	Then( n ){ throw new Error('Cannot use then in a shader function') }
	Debugger( n ){ throw new Error('Cannot use debuger in a shader function') }
	With( n ){ throw new Error('Cannot use with in a shader function') }

	// causes dependency marks to travel up the tree
	// uniform has mark 1
	// attribute has mark 2
	// pixel has mark 3
	Pre( n ){
		n.infer = undefined
		n.mark = undefined
		n.highmark = undefined
	}

	Post( n, overload_mark ){
		// propagate mark and inference up the chain
		var parent = n.parent
		var nmark = overload_mark || n.mark
		if(parent){
			if(nmark){
				var pmark = parent.mark
				if(!pmark) parent.mark = nmark
				else if(pmark < nmark) parent.mark = nmark
			}
			if(!parent.infer) parent.infer = n.infer
		}
		if(nmark > highmark) redo_function_mark = nmark
		if(n.flags & 8){
			console.log(n)
		}
	}

	// i must dry implement Do
	Do( n, parent ){
		n.parent = parent
		Pre(n)
		AST.Walk::Do(n, parent)
		// fuse mark properly
		if(n.arg.mark > n.call.mark) n.call.mark = n.arg.mark
	}

	Value( n, parent ){
		n.parent = parent
		Pre(n)
		if(n.raw === 'true' || n.raw === 'false'){
			n.infer = bool
			return Post(n)
		}
		if(n.kind != 'num') throw new Error('Only numeric values supported in shaders')
		if(n.raw.indexOf('.') != -1 || n.raw.indexOf('e') != -1) n.infer = float
		else n.infer = int
		Post(n)
	}

	For( n, parent ){
		var old_scope = scope
		var old_marks = marks
		scope = Object.create(scope)
		marks = Object.create(marks)
		AST.Walk::For(n, parent)
		scope = old_scope
		marks = old_marks
		if(highmark > (n.mark||0)) n.mark = highmark
		n.for_mark = n.mark
		AST.Walk::For(n, parent)
	}

	ForTo( n, parent ){
		var old_scope = scope
		var old_marks = marks
		scope = Object.create(scope)
		marks = Object.create(marks)
		AST.Walk::ForTo(n, parent) // first walk
		scope = old_scope
		marks = old_marks
		if(highmark > (n.mark||0)) n.mark = highmark
		n.for_mark = n.mark // store mark
		AST.Walk::ForTo(n, parent) // second walk
	}

	ForFrom( n, parent ){
		if(n.left.type != 'Var' || n.left.defs.length != 1) throw new Error('Shaders only support for(var value from fixedarray)')
		var old_scope = scope
		var old_marks = marks
		scope = Object.create(scope)
		marks = Object.create(marks)
		AST.Walk::ForFrom(n, parent)
		scope = old_scope
		marks = old_marks
		if(highmark > (n.mark||0)) n.mark = highmark
		n.for_mark = n.mark
		AST.Walk::ForFrom(n, parent)
	}

	Id( n, parent ){
		n.parent = parent
		Pre(n)
		var name = n.name
		//if(n.name == '_scopes_'){
			//console.log(Object.keys(this.scope), Object.keys(this.marks))
		//	return Post(n)
		//}
		if(n.flag == 35){
			n.infer = vec3
			return Post(n)// is color
		}

		if(macro_args && macro_args[name]){
			var type = macro_args[name].infer
			n.infer = type
			return Post(n)
		}

		if(scope && scope[name]){
			var type = scope[name]
			n.infer = type
			n.mark = marks[name]
			return Post(n)
		}

		var type = glsl_variables[name]
		if(type){
			if(name == 'gl_FragCoord') n.mark = 3
			n.infer = type
			return Post(n)
		}

		// static type method or property?
		var type = find_type(name)
		if(type){
			n.infer = type
			return Post(n)
		}

		// check if we are a define?
		var def = this.find_define(name)
		if(def){
			this[def.type](def, n)
			return Post(n)
		}

		// now what we are a local variable.
		if(imm_locals && imm_locals[name]){
			// store the type
			var type = imm_locals[name]
			n.infer = type === 1 ? float : type
			n.mark = 1
			return Post(n)
		}

		var prop = context[name] || main_this[name]

		// last resort, resolve against locals
		if(locals && name in locals){
			prop = locals[name]
			// route storage through our main this
			main_this[name] = prop
		}

		if(prop === undefined){
			console.log(context)
			throw new Error('Cannot resolve ' + name + ' on ' + context.__class__)
		}
		
		// what if we are a type
		// we are a reference to a remote object
		if(prop.__proxy__){
			// what if we reference a texture here?
			if(prop._sampler2D_){
				n.mark = 2 // atleast a vertex shader
			}
			n.infer = {
				name:'object'
				ref_name: name
				ref:prop
			}
			return Post(n)
		}
		if(prop._ast_){ // expression
			if(renamed_uniforms && renamed_uniforms[name]){
				throw new Error('Assigning to ast value wont do what you expect '+name)
			}
			if(prop.type != 'Value'){
				//TODO this thing dont work anymore with re-passing
				if(this.refcount[name]) this.refcount[name]++
				else this.refcount[name] = 1
			}
			var old_module = this.module
			var old_locals = this.locals
			this.module = prop.module
			this.locals = prop.locals
			this[prop.type](prop, n)
			this.module = old_module
			this.locals = old_locals
		}
		else {
			//TODO turn properties into signals here!
			//log(prop)

			// its a placeholder class, just compile against it
			if(prop.hasOwnProperty('__class__')){
				n.infer = {
					name:'object'
					ref_name: name
					ref:prop
				}
				return Post(n)
			}

			if(typeof prop == 'object' && typeof prop._t_ == 'object'){
				n.mark = 1
				n.infer = prop._t_
			} 
			else if(typeof prop == 'number'){
				n.mark = 1
				n.infer = float
			}
			else if(typeof prop == 'boolean'){
				n.mark = 1
				n.infer = bool
			}
			else throw new Error('Add other property types ' + name)
			if(renamed_uniforms[name]){
				n.mark = renamed_uniforms[name]
			}
		}
		if(n.typing){
			// lets set our 'infer' to this type
			if(n.typing.name == 'pixel'){
				n.mark = 3	// mark us as pixel
			}
			else if(n.typing.name == 'vertex'){
				n.mark = 2
			}
			else {
				// where do we get our typemap?
				n.infer = module.types[n.typing.name]
				if(!n.infer) throw new Error('cannot find type ' + n.typing.name)
			}
		}
		Post(n)
	}

	Index( n, parent ){
		n.parent = parent
		Pre(n)
		if(!n.index){
			var nmark = n.mark = 2 // mark as attribute
			if(n.object.typing && n.object.typing.name == 'pixel')
				nmark = 3

			var name = n.object.name

			// support local attributes
			var loc_attr = imm_locals && imm_locals[name]
			if(loc_attr){
				n.infer = loc_attr
				return Post(n, nmark)
			}

			// fetch attributes on parent chain
			var attrib = context[name]

			if(!attrib) throw new Error('cannot fetch attribute '+n.object.name)

			n.infer = attrib._t_

			return Post(n, nmark)
		}
		else{ // we are an index
			// resolve the object
			this[n.object.type](n.object, n)

			// resolve the index
			this[n.index.type](n.index, n)

			// we have to have an inferred type on object now
			if(!n.infer) throw new Error('index access without type')
			if(!n.infer.dim) throw new Error('index access on type without dimensions')
			n.infer = Object.getPrototypeOf(n.infer) // rip off dimensions

			return Post(n)
		}
		return AST.Walk::Index(n)
	}
	
	var swizzle_type_grid = {
		'vec2':{2:vec2,3:vec3,4:vec4}
		'vec3':{2:vec2,3:vec3,4:vec4}
		'vec4':{2:vec2,3:vec3,4:vec4}
		'ivec2':{2:ivec2,3:ivec3,4:ivec4}
		'ivec3':{2:ivec2,3:ivec3,4:ivec4}
		'ivec4':{2:ivec2,3:ivec3,4:ivec4}
		'bvec2':{2:bvec2,3:bvec3,4:bvec4}
		'bvec3':{2:bvec2,3:bvec3,4:bvec4}
		'bvec4':{2:bvec2,3:bvec3,4:bvec4}
	}

	Key( n, parent ){
		n.parent = parent
		Pre(n)

		// only try to walk/resolve the object
		this[n.object.type](n.object, n)
		var nmark = n.mark

		// remote object
		if(n.object.infer.name == 'object'){

			var obj = n.object.infer.ref
			// make a reference to another object.key
			var propname = n.key.name
			var prop = obj[propname]

			//if(prop === undefined) throw new Error('Cannot find ' + n.object.name + '.' + propname)

			// mark signal in our proxy table
			n.infer = prop && prop._t_ || float
			n.mark = 1 // uniform

			// flag ourself in proxy_refs
			var objname = n.object.name
			var bind = proxy_refs[objname] || (proxy_refs[objname] = {})
			bind[propname] = 1

			// flag it for the dependency codegen
			n.remote = 1
			return Post(n)
		}

		if(n.object.type == 'Index' && !n.object.index && !(n.object.infer.name in glsl_types)){
			// extend our vertex shader mark upwards one step, since we are not splittable here
			if(n.mark == 3) nmark = 3, n.mark = 2
		}

		// we have to have an inferred type on object now
		if(!n.infer) throw new Error('key access without type: ' + n)
		
		var fields = n.infer.fields
		var key_name = n.key.name

		if(!fields) throw new Error('key access on type without fields: '  + n.infer.name + '('+AST.toString(n)+')')

		if(key_name == 'length' && n.infer.dim){
			n.const_length = n.infer.dim
			n.mark = undefined
			n.infer = int
			return Post(n)
		}
		
		var type = fields[key_name] || fields[AST.fieldAliases[key_name]]

		if(!type && n.object.infer.name in glsl_types){
			// validate swizzlingl. this code must deserve a prize.

			var type_switch = swizzle_type_grid[n.object.infer.name]
			var swiz = check_swizzle( key_name, n.object.infer.slots )
			if(swiz){
				type = type_switch[swiz.length]
			}
		}
		if(!type) throw new Error('type '+n.object.infer.name+' has no field ' + key_name + '(' + n + ')')

		n.infer = type
		
		return Post(n, nmark)
	}

	this.Function( n, parent ){
		// we should only do our body, not our params
		n.parent = parent
		//Pre(n)
		var body = n.body
		if(body) this[body.type](body, n)
		//Post(n)
	}

	Def( n, parent ){
		n.parent = parent
		var type
		var mark
		// dont let the mark travel up
		var oldmark = n.mark
		if(n.init) this[n.init.type](n.init, n)
		if(oldmark > n.mark || n.mark === undefined) n.mark = oldmark
		// fetch our mark from for loop
		var in_for
		var for_node
		if(for_node = n.parent.parent){
			if(for_node.type == 'ForFrom' || for_node.type == 'ForTo' || for_node.type == 'For'){
				if(n.parent.defs.length > 1) throw new Error('Cannot define more than one var in a for')
				if(for_node.for_mark) n.mark = for_node.for_mark
				in_for = true
			}
		}

		if(n.parent.type == 'Var'){
			if(!n.init){
				if(for_node && for_node.type == 'ForFrom'){
					// the type is inferred from the right hand side
					type = for_node.right.infer
					if(!type.dim) throw new Error('Cannot for from over dimensionless type ' + type.name)
					type = Object.getPrototypeOf(type)
				}
				else throw new Error('Cannot use uninitialized var')
			}
			else{
				type = n.init.infer
				if(in_for && type.name == 'float') type = int
			}
		}
		else if(n.parent.type === 'TypeVar'){
			var typing = n.parent.typing
			if(typing.type == 'Index'){
				var name = typing.object.name
				var type = this.find_type(name)
				type = Object.create(type)
				type.dim = 1
			}
			else{
				var name = typing.name
				type = this.find_type(name)
			}
		}
		else throw new Error('Unsupported Def encountered')
		if(highmark > (n.mark || 0)) n.mark = highmark
		n.infer = scope[n.id.name] = type
		marks[n.id.name] = n.mark
		//console.log(n.id.name, n.mark, Object.keys(marks))

		Post(n)
	}

	Return( n, parent ){
		// set return type
		n.parent = parent
		Pre(n)
		if(n.arg){
			var oldmark = n.mark
			this[n.arg.type](n.arg, n)
			if(oldmark > n.mark || n.mark === undefined) n.mark = oldmark
		}
		if(return_type && return_type.name != n.infer.name){
			throw new Error('Multiple return types detected '+return_type.name + ' and ' + n.infer.name)
		}
		return_type = n.infer
		if(highmark > (n.mark||0)) n.mark = highmark
		Post(n)
	}

	// type inference implementation of texture2D
	compiler_texture2D( n, parent ){

		var args = n.args
		if(args.length < 2) throw new Error('texture2D not enough arguments')
		// the first arg is the sampler2D we are going to need.

		var sampler = args[0]
		var sampler_name 
		if(sampler.type == 'This'){
			sampler_name = context_name
			sampler.infer = {
				object:context,
				name:'object'
			}
		}
		else{
			sampler_name = sampler.name
			this[sampler.type](sampler, n)

			if(sampler.infer.name != 'object' || !sampler.infer.ref._sampler2D_)
				throw new Error('texture2D invalid first argument type ' + sampler.infer.name)
		}

		var pos = args[1]
		this[pos.type](pos, n)
		if(pos.infer.name != 'vec2')
			throw new Error('texture2D invalid second argument type ' + pos.infer.name)

		// optional 3rd arg
		var bias = n.args[2]
		if(bias && bias.type != 'Object'){
			this[bias.type](bias, n)
		}
		
		if(!proxy_refs[sampler_name]) proxy_refs[sampler_name] = {}

		if(n.mark != 3) n.mark = 2
		n.infer = vec4
		Post(n)
	}

	// type inference calls
	Call( n, parent ){
		n.parent = parent
		Pre(n)

		// shortcut for Math.something() or type.something()
		if(n.fn.type == 'Key'){
			var obj = n.fn.object
			if(obj.type == 'Id'){
				var name = obj.name
				if(name == 'Math'){
					// we might not be
					n.infer = float
					return Post(n)
				}
				var type = this.find_type(name)
				if(type){
					// static method call
					for(var arg from n.args) this[arg.type](arg, n)
					n.infer = type
					return Post(n)
				}
			}
		}

		if(n.fn.type == 'Key'){ // type infer the object
			n.fn.parent = n
			this[n.fn.object.type](n.fn.object, n.fn)
		}
		else if(context[n.fn.name] && !context[n.fn.name]._ast_){
			this[n.fn.type](n.fn, n)
		}

		// we are an id, or an id on an object.
		if(n.fn.type == 'Id' || n.fn.type == 'Key' && n.fn.object.infer && n.fn.object.infer.name == 'object'){

			// check 
			var name
			var new_context
			if(n.fn.type == 'Id'){
				name = n.fn.name

				//!HACK todo fix this
				if(name == 'dFdx' || name == 'dFdy'){
					for(var arg from n.args) this[arg.type](arg, n)
					n.mark = 3
					return Post(n)
				}
				else if(name == 'length'){
					for(var arg from n.args) this[arg.type](arg, n)
					n.infer = float
					return Post(n)
				}

				// we can call objects directly
				if(n.fn.infer && n.fn.infer.name == 'object'){
					new_context = n.fn.infer.ref
					context_name = n.fn.infer.ref_name
					name = 'call'
				}
				else{
					// 
					var compiler = 'compiler_' + name
					if(this[compiler]){
						return this[compiler](n, parent)
					}

					var type = find_type(name)

					// type infer the args
					for(var arg from n.args) this[arg.type](arg, n)

					// type constructor
					if(type){
						n.infer = type
						// lets do the args
						return Post(n)
					}
				}
			}
			else{
				// we are a function on another object
				new_context = n.fn.object.infer.ref
				context_name = n.fn.object.infer.ref_name
				name = n.fn.key.name
			}

			// type infer the args
			var new_highmark = 0
			for(var arg from n.args){
				this[arg.type](arg, n)
				if(arg.mark > new_highmark) new_highmark = arg.mark
			}
			if(n.mark > new_highmark) new_highmark = n.mark

			//If we have a no assignment function
			if(n.parent && n.parent.mark > new_highmark) new_highmark = n.parent.mark

			// lets check if we are calling a macro
			// calls on other objects provide a new context
			// i know. i need to refactor this to be nicer. or learn to program
			var old_context = context
			if(new_context) context = new_context
			n.args.expanded = true
			var [macro, macro_generics] = find_macro(n, name, n.args)

			if(macro){
				// we are a macro
				if(macro.type == 'Function'){
					// lets type infer trace an actual macro call
					var old_scope = scope
					var old_marks = marks
					var old_return = return_type
					var old_module = this.module
					var old_generics = generics
					var old_highmark = highmark
					var old_redo_function_mark = redo_function_mark
					var old_renamed_uniforms = renamed_uniforms
					highmark = new_highmark
					generics = macro_generics
					return_type = undefined
					redo_function_mark = undefined
					var mparams = macro.params
					scope = Object.create(null)
					marks = Object.create(null)
					renamed_uniforms = Object.create(old_renamed_uniforms)
					if(macro.module) this.module = macro.module
					for(var i, arg from n.args){
						if(!arg.infer) throw new Error('Cannot infer arg in macro '+name)
						if(arg.infer.name == 'object') throw new Error('Object arguments to function not implemented yet')
						var name = mparams[i].id.name
						scope[name] = arg.infer
						marks[name] = new_highmark//arg.mark
					}
					// lets set the arguments on the scope
					// if this one bails with false
					this[macro.type](macro, n)
					if(redo_function_mark){ // we have to do it again
						scope = Object.create(null)
						marks = Object.create(null)
						renamed_uniforms = Object.create(old_renamed_uniforms)
						for(var i, arg from n.args){
							var name = mparams[i].id.name
							scope[name] = arg.infer
							marks[name] = redo_function_mark//arg.mark
						}
						highmark = redo_function_mark
						redo_function_mark = undefined
						this[macro.type](macro, n)
					}
					this.module = old_module
					redo_function_mark = old_redo_function_mark
					generics = old_generics
					highmark = old_highmark
					scope = old_scope
					marks = old_marks
					n.infer = return_type
					// bubble up mark from function
					if(n.mark === undefined || n.mark < macro.mark) n.mark = macro.mark
					return_type = old_return
				}
				else if(macro.type == 'Call'){

					var old_args = macro_args
					old_generics = generics
					generics = macro_generics
					macro_args = Object.create(null)
					var margs = macro.args
					for(var i, arg from n.args){
						if(arg.infer.name == 'object') throw new Error('Object arguments to function not implemented yet')
						macro_args[margs[i].name] = arg
					}
					var astnode = macro.parent.value
					// type infer trace a macro!
					this[astnode.type](astnode, n)
					n.infer = astnode.infer
					macro_args = old_args
				}
				else throw new Error('Macro called but not a function '+name)
				// we have to figure out a return-type trace on our macro
				if(new_context) context = old_context
				return Post(n)
			}
			if(new_context) context = old_context
		}
		
		// otherwise it may be a type method, we need to trace it
		return AST.Walk::Call(n, parent)
	}

	// operator type inferencing
	Binary( n, parent ){
		n.parent = parent
		Pre(n)
		this[n.left.type](n.left, n)
		this[n.right.type](n.right, n)

		var left_i = n.left.infer.name
		var right_i = n.right.infer.name

		if(left_i == 'int' || left_i == 'float') n.infer = n.right.infer
		else if(right_i == 'int' || right_i == 'float') n.infer = n.left.infer
		else if(left_i == 'mat4'){
			if(right_i == 'vec2' || right_i == 'vec3' || right_i == 'vec4') n.infer = vec4
			else if(right_i == 'mat4') n.infer = mat4
		}
		else if(right_i == 'mat4'){
			if(left_i == 'vec2' || left_i == 'vec3' || left_i == 'vec4') n.infer = vec4
		}
		else if(left_i == 'vec3' && right_i == 'vec4'){
			n.infer = vec4
		}
		else if(left_i == 'vec4' && right_i == 'vec3'){
			n.infer = vec4
		}

		Post(n)
	}

	Assign( n, parent ){
		n.parent = parent
		Pre(n)
		this[n.left.type](n.left, n)
		this[n.right.type](n.right, n)
		if(n.left.mark == 1 ){ // make a renamed uniform
			if(n.left.type != 'Id') throw new Error('Only support Id renamed uniforms')
			//var mark = n.right.mark
			//if(highmark > (mark || 0)) mark = 3
			if(renamed_uniforms[n.left.name]){ // dont re-do assignment
				n.left.mark = highmark
			}			
			else{
				renamed_uniforms[n.left.name] = highmark
			}
		}
		Post(n)
	}

	If(n, parent){
		AST.Walk::If(n, parent)
		if(highmark > (n.mark||0)) n.mark = highmark
		Post(n)
	}

	Logic(n, parent){
		AST.Walk::Logic(n, parent)
		parent.infer = undefined
		n.infer = bool
		Post(n)
	}

	check_swizzle = AST.ToJS.check_swizzle
	find_define = AST.ToJS.find_define
	find_type = AST.ToJS.find_type
	find_macro = AST.ToJS.find_macro
	macro_match_args = AST.ToJS.macro_match_args
}















// generate the GLSL
class GenGLSL extends AST.ToCode{
	term = ';'

	// otherwise if we are not 'pixel' we need to spit out varyings.
	expand( n, parent ){
		//log(n.type)
		if(n.mark === undefined){
			// if we are an Id or a Value
			if(n.type !== 'Unary' && n.type !== 'Id' && n.type !== 'Value' && 
				!(n.type == 'Call' && n.fn.type == 'Id' && n.fn.name in glsl_types))
				n.mark = 1
		}
		if(n.mark == 1 && n.infer){ // we are a uniform dependent expression
			// ignore these marks, should be fixed in inferencer really
			if(n.type == 'Block' || n.type == 'Var' || n.type == 'TypeVar' || n.type == 'Assign'){
				//console.log("Splitting at the wrong boundary", n)
				return AST.ToCode::expand(n, parent)
			}
			if(context.dump>1)console.log('To Uniform: '+n.toString())
			// okay
			//if(!n.infer) throw new Error('Failed to infer type '+n.toDump())
			// okay so, we are a uniform. we splice in
			// a temp uniform, and we define it
			var type_name = n.infer.name
			var uni = {
				imm_locals: this.imm_locals
				locals: this.locals
				module: this.module
				name: (pixel?'pix_':'vtx_') + type_name + '_' + (uniform_id++)
				node: n
			}

			if(!(type_name in glsl_types)) this.types[type_name] = n.infer
			n.uniform = uniforms.push(uni) - 1
			return uni.name
		}
		// output vertex varying
		if(pixel && n.mark == 2 && n.infer){
			// these things cant be split up
			if(n.type == 'Block' || n.type == 'Var' || n.type == 'TypeVar' || n.type == 'Assign'){
				//console.log("Splitting at the wrong boundary", n)
				return AST.ToCode::expand(n, parent)
			}

			if(context.dump>1)console.log('To Vertexshader: '+n.toString())

			// alright we need to output a vertex varying
			var type_name = n.infer.name
			var vary = {
				name: 'var_' + type_name + '_' + (varying_id++)
				node: n
			}
			varyings.push(vary)
			if(!(type_name in glsl_types)) this.types[type_name] = n.infer

			return vary.name
			//log('here', n.toDump())
		}
		// otherwise output self
		return AST.ToCode::expand(n, parent)
	}

	// Id resolver
	Id( n ){
		var name = n.name
		// if we are # bla lets resolve the color and inline.
		if(n.flag == 35){ // is a color
			vec3 col = ONE.color(name)
			return 'vec3(' + col.x + ',' + col.y + ',' + col.z + ')'
		}
		
		if(name in glsl_functions || name in glsl_variables){
			return name
		}
		
		// check macro args
		if(macro_args && name in macro_args){
			return '(' + macro_args[name] + ')'
		}

		// special thing for for of in GLSL
		if(iterators && name in iterators){
			return iterators[name]
		}

		if(scope && name in scope){
			return name
		}
		//console.log(name, n, this.module)
		var def = find_define(name)
		if(def){
			return expand(def, n)
		}			

		var prop = context[name]
		// if we are here, we are not a uniform

		if(prop === undefined){
			throw new Error("cannot resolve " + name)
		}
		// temporary variable generation
		if(prop._ast_){

			var node = prop
			var type = node.type
			var old_module = this.module
			var old_locals = this.locals
			if(type == 'Id' || type == 'Value' || 
				type == 'Key' || (type == 'Index' &&
					(!node.index || node.index.type == 'Value'))){
				this.locals = prop.locals
				this.module = prop.module
				var ret = expand(prop, n)
				this.locals = old_locals
				this.module = old_module
				return ret
			}
			// use a tempvar
			var count = refcount[name]
			if(typeof count == 'object'){
				// we already have it defined
				tmpvars.splice(tmpvars.indexOf(count), 1)
				tmpvars.push(count)
				return count.name
			}
			else if(count>1){ // define it
				var tmp = {
					name:'tmp_' + n.infer.name + '_' + (uniform_id++),
					type:n.infer.name,
					value:expand(prop, n)
				}
				refcount[name] = tmp
				tmpvars.push(tmp)
				return tmp.name
			}
			this.module = prop.module
			this.locals = prop.locals
			var ret = expand(prop, n)
			this.module = old_module
			this.locals = old_locals
			return '(' + ret + ')'
		}
		if(renamed_uniforms[name]){
			return renamed_uniforms[name].name
		}
		debugger
		throw new Error('Dont know what to do with '+name)
		
		return ''
	}
	
	// resolve index
	Index( n ){
		// so we got a bla[]
		if(!n.index){
			if(n.object.type != 'Id') throw new Error('dont support property attributes')
			
			var name = n.object.name

			// support local attribute objects
			var obj = imm_locals && imm_locals[name]
			if(obj) obj = {_t_:obj, _local_:1}
			else {
				// fetch attributes on parent chain
				obj = context[name]
				// check if our property is on the main_this
				// ifnot lets rename it
				if(obj !== main_this[name]){
					name = main_uid + '_attr_' + name
					main_this[name] = obj
				}
			}
			
			if(!n.infer.name) throw new Error('Cannot type infer / use untyped vertex attribute ' + name)

			if(!(n.infer.name in glsl_types)){
				throw new Error('Dont support plain struct attributes('+n.infer.name+'), access the primitive properties ' + name)
			}

			if(!obj) throw new Error('Cannot find vertex attribute[] ' + name)
			
			var attr = attribs[name]
			if(attr && attr !== obj) throw new Error('Cannot redefine vertex attribute[] ' + name)

			attribs[name] = obj
			
			return name // return name
		}
		return AST.ToCode::Index(n)
	}
	
	// we have to resolve Id's
	Key( n ){
		if(n.const_length){
			return n.const_length
		}
		if(n.object.type == 'Index' && !n.object.index && !(n.object.infer.name in glsl_types)){
			// we have to create a sub attribute mapping
			var name = n.object.object.name

			var obj = imm_locals[name]
			if(obj) obj = {_t_:obj, _local_:1}
			else obj = context[name]

			if(!obj) throw new Error('Cannot find vertex attribute[] ' + name)

			var sub = sub_attribs[name] || (sub_attribs[name] = Object.create(null))
			
			sub[n.key.name] = obj

			name += '_' + n.key.name
			attribs[name] = {sub: obj._t_.fields[n.key.name]}
			return name
		}
		if(n.object.type == 'Id'){
			var objname = n.object.name  
			if(objname in glsl_variables){
				return objname + '.' + n.key.name
			}
		}
		// lets only resolve the object, en just postfix the key
		return expand(n.object, n) + '.' + n.key.name
	}

	Unary( n, parent ){
		if(n.op.length != 1) throw new Error('Unary '+n.op+' not supported in shaders')
		return AST.ToCode::Unary(n, parent)
	}

	Binary( n ){
		var left_i = n.left.infer.name
		var right_i = n.right.infer.name
		var left_t = n.left.type
		var right_t = n.right.type
		var left = this.expand(n.left, n)
		var right = this.expand(n.right, n)

		// auto int to float cast
		/*
		if(left_i == 'int' && right_i != 'int'){
			if(left_t == 'Value') left = n.left.raw + '.'
			else left = 'float(' + left + ')'
		}
		else if(right_i == 'int' && left_i != 'int'){
			if(right_t == 'Value') right = n.right.raw + '.'
			else right = 'float(' + right + ')'
		}*/
		// auto vector upgrade
		if(left_i == 'mat4'){
			if(right_i == 'vec2') right = 'vec4(' + right + ',0.,1.)'
			else if(right_i == 'vec3') right = 'vec4(' + right + ',1.)'
		}
		else if(right_i == 'mat4'){
			if(left_i == 'vec2') left = 'vec4(' + left + ',0.,1.)'
			else if(left_i == 'vec3') left = 'vec4(' + left + ',1.)'
		}
		// auto expand vec3 to vec4
		else if(left_i == 'vec3' && right_i == 'vec4'){
			left = 'vec4(' + left + ',1.)'
		}
		else if(left_i == 'vec4' && right_i == 'vec3'){
			right = 'vec4(' + right + ',1.)'
		}

		// paren detect
		if(AST.needsParens(n, n.left)) left = '(' + left + ')'
		if(AST.needsParens(n, n.right)) right = '(' + right + ')'

		if(n.op == '**'){
			return 'pow(' + left + ',' + right + ')'
		}

		return left + space + n.op + space + right
	}

	Assign( n ){
		var left, right
		if(n.left.type == 'Id' && renamed_uniforms[n.left.name]){
			// do not rename the uniform more than once
			left = renamed_uniforms[n.left.name].name
			right = this.expand(n.right, n)
		}
		else{
			left = this.expand(n.left, n)
			right = this.expand(n.right, n)
			if(n.left.uniform !== undefined){
				var uni = uniforms[n.left.uniform]
				uni.rename = 'ren_' + uni.name
				renamed_uniforms[n.left.name] = uni
			}
		}
		return left + this.space + n.op + this.space + right
	}

	Var( n ){
		var ret = ''
		for(var v from n.defs){
			if(ret) ret +=  term + newline + depth
			ret += Def(v)
		}
		return ret
	}

	// typevar needs its struct definitions
	TypeVar( n ){
		var type_name = n.typing.infer.name
		if(!(type_name in glsl_types)) types[type_name] = n.typing.infer
		if(n.typing.typing && n.typing.typing.name == 'const')
			return 'const '+type_name + ' ' + flat(n.defs, n)
		return type_name + ' ' + flat(n.defs, n)

	}

	ForTo = AST.ToJS.ForTo

	ForFrom( n ){
		// supporting the most simple for from over a known type size
		var type = n.right.infer
		var value_name 
		if(n.right.type != 'Id') throw new Error('For from right hand type not a basic identifier')
		var array_name = expand(n.right, n)
		if(n.left.type == 'TypeVar' || n.left.type == 'Var'){
			var value_id = n.left.defs[0]
			value_name = value_id.id.name
			if(type.name !== value_id.infer.name) throw new Error('For From left hand type not equal to right hand, use var')
			if(!(type.name in glsl_types)) types[type.name] = type
		}
		else if(n.left.type == 'Id'){
			value_name = n.left
			if(type.name !== n.left.infer.name) throw new Error('For From left hand type not equal to right hand, use var')
		}
		else throw new Error('Unusable left hand side in for from')
		var iter_name = alloc_var(n)

		if(!iterators) iterators = Object.create(null)
		iterators[value_name] = array_name + '[' + iter_name + ']'

		// lets define our loop variable
		var ret = 'for(int ' + iter_name +' = 0;' + iter_name + '<' + n.right.infer.dim + ';' + iter_name + '++)' + 
			expand(n.loop, n)

		return ret
	}

	Def( n ){
		var name = n.id.name
		if(!scope) {
			console.log(n)
			debugger
		}
		scope[name] = n.infer

		var dim = ''
		if(n.infer.dim) dim = '[' + n.infer.dim + ']'

		if(n.parent.type == 'Var'){
			var type_name = n.infer.name
			if(!(type_name in glsl_types)) types[type_name] = n.infer
			if(!n.init){ // dont init
				return n.infer.name + ' ' + name + dim
			} 
			return n.infer.name + ' ' + name + dim +' = ' + expand(n.init, n)
		}
		else if(n.parent.type === 'TypeVar'){
			if(n.init){
				if(n.init.infer.name == 'float' && n.infer.name == 'int'){
					return name + dim + ' = int(floor(' + expand(n.init, n) + '+.5))'
				}
				else if(n.init.infer.name == 'int' && n.infer.name == 'float'){
					return name + dim + ' = float(' + expand(n.init, n) + ')'
				}
				return name + dim + ' = ' + expand(n.init, n)
			}
			return name + dim
		}
		else throw new Error('Unsupported Def encountered')
	}

	alloc_var( n ){
		while(n && n.var_alloc_id === undefined){
			n = n.parent
		}
		return name = 'tmp_' + (n.var_alloc_id++)
	}

	// Function!
	this.Function( n, name, argdef, ret_type ){
		n.var_alloc_id = 0
		// allright lets generate a function!
		var ret 
		if(!ret_type) ret = 'void'
		else ret = ret_type.name
		ret += ' ' + name + '(' + argdef + ')'

		var old_depth = depth
		depth += indent

		var old_iterators = iterators
		iterators = undefined

		var body =  expand(n.body, n)
		
		ret += body
	
		depth = old_depth
		iterators = old_iterators

		return ret
	}

	var filter_shorten = {
		NEAREST:'N'
		LINEAR:'L'
		NEAREST_MIPMAP_NEAREST:'NN'
		LINEAR_MIPMAP_NEAREST:'LN'
		NEAREST_MIPMAP_LINEAR:'NL'
		LINEAR_MIPMAP_LINEAR:'LL'
		REPEAT:'R'
		CLAMP_TO_EDGE:'C'
		MIRRORED_REPEAT:'M'
	}

	// texture2D implementation
	compiler_texture2D( n ){
		// alright we have to concat the sampler flags
		var args = n.args
		var node = args[args.length - 1]
		var state = {}
		if(node.type == 'Object'){
			for(var tag from node.keys) state[tag.key.name] = tag.value.name
		}
		// this is a hack to simulate sampler objects 
		state.MIN_FILTER ?= 'LINEAR'
		state.MAG_FILTER ?= 'LINEAR'
		state.WRAP_S ?= 'REPEAT'
		state.WRAP_T ?= 'REPEAT'
		var hash = 
			filter_shorten[state.MIN_FILTER] + '_' +
			filter_shorten[state.MAG_FILTER] + '_' +
			filter_shorten[state.WRAP_S] + '_' +
			filter_shorten[state.WRAP_T]

		var source
		var image
		// fetch image object
		if(args[0].type == 'This'){
			source = context_name
			image = context
		}	
		else{
			source = args[0].name
			image = context[source]
		}

		// construct a sampler uid
		var sampler_id = 'sam_' + (image.__proxy__ || context_name) + '_' + hash

		// store the sampler, with a
		var sam
		if(sam = samplers[sampler_id]){
			sam.target |= pixel?1:2
		}
		else{
			samplers[sampler_id] = {
				type:   'sampler2D'
				source: source
				image:  image
				ismip:  filter_shorten[state.MIN_FILTER].length == 2
				state:  state
				target: pixel?1:2
			}
		}

		var ret = 'texture2D('

		ret += sampler_id + ', '  +
			this.expand(args[1], n) 

		if(args.length > 2 && args[2].type != 'Object'){
			ret += ', ' + this.expand(args[2], n) 
		}
		ret += ')'

		return ret
	}

	// Do calls
	Call( n ){
		if(n.fn.type !== 'Id' && n.fn.type !== 'Key') 
			return AST.ToCode::Call(n)
		// check 
		var name 
		var new_context

		// its a call on another object
		if(n.fn.type == 'Key' || n.fn.infer && n.fn.infer.name == 'object'){
			if(n.fn.type == 'Key'){
				new_context = n.fn.object.infer.ref
				context_name = n.fn.object.infer.ref_name
				name = n.fn.key.name
			}
			else{
				new_context = n.fn.infer.ref
				context_name = n.fn.name
				name = 'call'
			}
		}
		else{
			name = n.fn.name

			var compiler_name = 'compiler_' + name
			if(this[compiler_name]){
				return this[compiler_name](n)
			}

			var type = find_type(name)
			// type constructor
			if(type){
				var ret = name + '(' 
				for(var i, arg from n.args){
					if(i) ret += ','
					ret += this.expand(arg, n)//[arg.type](arg, n)
				}
				ret += ')'
				return ret
			}
			// lets check our name against built in
			if(name in glsl_functions) return AST.ToCode::Call(n)
		}
		var old_context = context
		if(new_context) context = new_context

		n.args.expanded = true // skip argument expansion in find_macro
		var [macro, macro_generics] = find_macro(n, name, n.args)
		if(macro){
			if(macro.type == 'Function'){
				// generate GLSL function
				var params = macro.params
				var gen = 'macro_' + name 
				var args = ''
				var argdef = ''
				var new_scope = Object.create(null)
				if(new_context) context = old_context
				if(new_context) gen += new_context.__proxy__

				for(var i, arg from n.args){
					if(i) args += ', ', argdef += ', '
					args += this.expand(arg, n)//[arg.type](arg, n)
					var type_name = arg.infer.name
					var param_id = params[i].id
					var param_name = param_id.name
					new_scope[param_name] = arg.infer
					if(param_id.typing && param_id.typing.typing)
						argdef += 'const '+type_name + ' ' + param_name
					else
						argdef += type_name + ' ' + param_name

					gen += '_' + type_name
				}
				if(new_context) context = new_context

				if(!type_methods[gen]){
					var old_depth = depth
					var old_args = macro_args
					var old_module = this.module
					var old_generics = generics
					var old_scope = scope

					scope = new_scope
					generics = macro_generics
					macro_args = undefined
					depth = '\t\t\t'
					if(macro.module) this.module = macro.module

					type_methods[gen] = this.Function(macro, gen, argdef, n.infer)

					depth = old_depth
					generics = old_generics
					macro_args = old_args
					this.module = old_module

					scope = old_scope
				}

				if(new_context) context = old_context

				return gen + '(' + args + ')'
			}
			else if(macro.type == 'Call'){
				var old_args = macro_args
				var old_module = this.module
				var old_generics = generics

				generics = macro_generics
				macro_args = Object.create(null)
				var margs = macro.args
				if(new_context) context = old_context
				for(var i, arg from n.args){
					macro_args[margs[i].name] = this.expand(arg, n)//this[arg.type](arg, n)
				}
				if(new_context) context = new_context
				var astnode = macro.parent.value
				this.module = astnode.module

				var ret = this[astnode.type](astnode, n)

				this.module = old_module
				generics = old_generics
				macro_args = old_args
				if(new_context) context = old_context

				return ret
			}
			throw new Error('Call failure')
		}
	}

	macro_match_args = AST.ToJS.macro_match_args
	find_macro = AST.ToJS.find_macro
	find_define = AST.ToJS.find_define
	find_type = AST.ToJS.find_type
}











// generate the uniform computation JS
class GenUniformJS extends AST.ToJS{
	Id( n ){
		var name = n.name
		if(n.flag == 35){ // is a color
			if(!n.name){
				if(!this.type_method) throw new Error('Type method template found outside of type_method')
				this.template_marked = true
				return this.template_marker
			}		
			vec3 col = ONE.color(name)
			return struct_constructor(n, 0, [col.x, col.y, col.z], vec3)
		}
		
		if(name in glsl_functions || name in glsl_variables){
			return name
		}

		if(imm_locals && imm_locals[name]){
			deps[name] = 1
			return name
		}

		var prop = context[name]

		// support locals by storing them on my this and remapping the name
		
		if(prop === undefined){
			if(this.scope[name] || macro_args && macro_args[name]) return this.resolve(n.name, n)
			if(locals && name in locals){
				//var store = '_locals_' + name
				// store local on this
				name = main_uid + '_local_' + name
				main_this[name] = locals[name]

				deps[name] = n.infer
				return 'this.' + name
			}
			else return this.resolve(n.name, n)
		}
		
		if(prop && prop._ast_){
			var old_module = this.module
			var old_locals = this.locals
			this.module = prop.module
			this.locals = prop.locals
			var ret = expand(prop, n)
			this.locals = old_locals
			this.module = old_module
			return ret
		}
		
		if(typeof prop == 'object'){
			//!TODO convert to signal
			deps[name] = n.infer
			return 'this.' + name
		} 
		else if(typeof prop == 'number'){
			//!TODO convert to signal
			deps[name] = n.infer
			return 'this.' + name
		}
		else if(typeof prop == 'boolean'){
			deps[name] = n.infer
			return 'this.' + name
		}
		else throw new Error('Cant generate uniformJS for '+name)
	}
	// ok so if we depend on a subobject
	Key( n ){
		if(n.remote){
			var prop_name = n.object.name
			var dep_name = n.object.name + '.' + n.key.name
			deps[dep_name] = n.infer
			return 'this.' + dep_name
		}
		return AST.ToJS::Key(n)
	}
}

// type serializer
StructToGLSL( tabs, type, type_flatten ){
	var ret = '\n' + tabs + 'struct ' + type.name + '{\n'
	var fields = type.fields
	for(var name in fields){
		var field = fields[name]
		// lets check if we have the type
		var fname = field.name
		if(!(fname in glsl_types) && !(fname in type_flatten)){
			type_flatten[fname] = 1
			ret = StructToGLSL(tabs, field, type_flatten) + ret
		}
		ret += tabs + '\t' + fname + ' ' + name  
		if(field.dim) ret += '[' + field.dim + '];\n'
		else ret += ';\n'
	}  
	ret += tabs + '};'
	return ret
}

// uniform type expander
UniformTypeExpander( type, parts, base, glname, offset ){

	// lets check if our type is in the mappings
	var ismat
	var map = glsl_uniform_map[type.name] || (ismat = glsl_uniform_matrix[type.name])
	if(map){ // unroll it
		var viewsize =  AST.viewSize[type.view] 
		var off = ((type.off || 0) + offset) / viewsize

		parts.init += `\t\t\t\t\t\tshader.ul_${base} = gl.getUniformLocation(shader, "${glname}");\n`
		var call = 'gl.' + map 
		if(ismat){
			call += '(shader.ul_' + base + ',false'
			var last = off + ((type.dim || 1 ) * type.size) / viewsize 
			if(off) call += ',v.subarray(' + off + ',' + last +')'
			else call += ',v'
		}
		else{
			if(type.dim){
				call += 'v(shader.ul_' + base
				if(off){ // subarray
					var last = off + (type.dim * type.size) / viewsize 
					call += ',v.subarray(' + off + ',' + last + ')'
				}
				else{
					call += ',v'
				}
			}
			else{
				call += '(shader.ul_' + base
				if(type.slots == 1){
					if(off) call += ',v[' + off + ']'
					else call += ',v'
				}
				else for(var i = 0; i < type.slots; i++){
					call += ',v[' + (off + i) + ']'
				}
			}
		}
		call += ')'
		parts.setters += '\t\t\t\t\t' + call + '\n'
	}
	else {
		if(type.dim){
			for(var i = 0; i < type.dim; i++){
				for(var name in type.fields){
					UniformTypeExpander(type.fields[name], parts, base + '_'  + i + '_' + name, glname + '[' + i + '].' + name , offset + i * type.size)
				}
			}
		}
		else{
			// lets set all the fields
			for(var name in type.fields){
				var field = type.fields[name]
				UniformTypeExpander(field, parts, base + '_' + name, glname + '.' + name, offset)
			}
		}
	}
}

function decodeBlendFactor( node, key ){
	if(node.type == 'Id') return glc.ONE
	if(node.type == 'Binary'){
		var factor = node.left
		if(node.right.name != key) throw new Error('Blend equation needs to have either pixel or frame on the right side of the *')
		if(factor.type == 'Binary'){ // its a one minus situation
			if(factor.op != '-' || factor.left.type != 'Value' || factor.left.value != 1) throw new Error('Invalid blending (only 1- supported)')
			var name = factor.right.name
			if(name == 'alpha') return glc.ONE_MINUS_SRC_ALPHA
			if(name == 'pixel') return glc.ONE_MINUS_SRC_COLOR
			if(name == 'frame') return glc.ONE_MINUS_DST_COLOR
			if(name == 'frame_alpha') return glc.ONE_MINUS_DST_ALPHA
			throw new Error('implement one minus mode')
		}
		if(factor.type != 'Id') throw new Error('Invalid blending (factor not an Id)')
		var name = factor.name
		if(name == 'alpha') return glc.SRC_ALPHA
		if(name == 'pixel') return glc.SRC_COLOR
		if(name == 'frame') return glc.DST_COLOR
		if(name == 'frame_alpha') return glc.DST_ALPHA
		// todo constant color and constant alpha
	}
	throw new Error('Invalid blending factor (node type invalid)')
}

DecodeBlendEquation( eq ){
	var out = {}
	if(eq.type == 'Binary' && (eq.op == '+' || eq.op == '-')){ // its the main equation
		var left = eq.left
		var right = eq.right

		if(eq.op == '+') out.op = glc.FUNC_ADD
		else if(eq.op == '-') out.op = glc.FUNC_SUBTRACT

		if(left.type == 'Id' && left.name == 'pixel' || 
		   left.type == 'Binary' && left.right.name == 'pixel'){
			left = eq.right, right = eq.left
			if(eq.op == '-') out.op = glc.FUNC_REVERSE_SUBTRACT
		}
		// left should be frame, right should be pixel
		out.dst = decodeBlendFactor(left, 'frame')
		out.src = decodeBlendFactor(right, 'pixel')
	}
	else if(eq.type == 'Binary' && eq.op == '*'){ // its a single mul
		out.op = glc.FUNC_ADD
		// the right side needs to be either frame or pixel
		if(eq.right.name == 'frame'){
			out.src = glc.ZERO
			out.dst = decodeBlendFactor(eq, 'frame')
		}
		else if(eq.right.name == 'pixel'){
			out.dst = glc.ZERO
			out.src = decodeBlendFactor(eq, 'pixel')
		}
		else throw new Error('Blend equation needs to have either pixel or frame on the right side of the *')
	} 
	else if(eq.type == 'Id'){
		out.op = glc.FUNC_ADD
		if(eq.name == 'frame'){
			out.src = glc.ZERO
			out.dst = glc.ONE
		}
		else if(eq.name == 'pixel'){
			out.src = glc.ONE
			out.dst = glc.ZERO
		}
		else throw new Error('Blend equation invalid (not frame or pixel)')
	}
	else throw new Error('Blend equation invalid (main type) ' + eq.type + ' ' + eq.op)

	return out
}


