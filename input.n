import math 

class Mouse extends WorkerProxy{

	// mouse signals
	signal move, x, y, isdown, left, right, middle, click, dblclick, clicker, cursor, leftdown, leftup, rightdown, rightup, cancapture
	
	ratio = 1
	clickspeed = 350

	enum cursors{
		'default'
		'none'
		'wait'
		'text'
		'pointer'

		'zoom-in'
		'zoom-out'
		'grab'
		'grabbing'

		'ns-resize'
		'ew-resize'
		'nwse-resize'
		'nesw-resize'

		'w-resize'
		'e-resize'
		'n-resize'
		's-resize'
		'nw-resize'
		'ne-resize'
		'sw-resize'
		'se-resize'

		'help'
		'crosshair'
		'move'

		'col-resize'
		'row-resize'

		'vertical-text'
		'context-menu'
		'no-drop'
		'not-allowed'
		'alias'
		'cell'
		'copy'
	}

	_cursor = 'default'

	get cursor(){ return _cursor }
	set cursor(v){ callHost('setCursor', _cursor = v) }
	$setCursor:(value){
		document.body.style.cursor = value
	}

	capture(onmove, onend){
		if(cancapture){
			var sub1, sub2
			if(onmove) sub1 = on_move.bind(onmove)
			function end(){
				if(sub1) sub1.cancel()
				sub2.cancel()
				if(onend) onend()
			}
			if(cancapture == 1) sub2 = on_leftup.bind(end)
			if(cancapture == 2) sub2 = on_middleup.bind(end)
			if(cancapture == 3) sub2 = on_rightup.bind(end)
		}
	}
	
	resetClicker(){
		callHost('resetClicker')
	}

	$resetClicker:(){
		last_click = undefined
	}

	$constructor:(){
		x = 0
		y = 0
		// allright we need to figure out how we send back the mouse events to the worker
		// are we going to send a vec2? or something else

		window.addEventListener('click') do(e)=> {
			// lets set x and y
			click = 1
		}

		window.addEventListener('dblclick') do(e)=> {
			dblclick = 1
		}

		click_count = 0

		window.addEventListener('mousedown') do(e) => {
			var now = Date.now()
			if(last_click !== undefined && now - last_click < clickspeed){
				click_count ++
			}
			else click_count = 1
			last_click = now

			clicker = click_count
			x = e.pageX * ratio//* window.devicePixelRatio
			y = e.pageY * ratio//* window.devicePixelRatio
			cancapture = e.button+1
			if(e.button === 0 ) left = 1, leftdown = 1
			if(e.button === 1 ) middle = 1
			if(e.button === 2 ) right = 1, rightdown = 1
			isdown = 1
		}

		window.addEventListener('mouseup') do(e) => {
			x = e.pageX * ratio//* window.devicePixelRatio
			y = e.pageY * ratio //* window.devicePixelRatio
			cancapture = 0
			if(e.button === 0 ) left = 0, leftup = 1
			if(e.button === 1 ) middle = 0
			if(e.button === 2 ) right = 0, rightup = 1
			isdown = 0
		}

		window.addEventListener('mousemove') do(e) => {
			//last_click = undefined
			x = e.pageX * ratio//* window.devicePixelRatio
			y = e.pageY * ratio//* window.devicePixelRatio
			move = 1
		}
	}
}

class Touch extends WorkerProxy{
	signal start, move, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, end,
		swipeleft, swiperight

	$constructor:(){
		function update(e){
			if(e.touches.length>0) x1 = e.touches[0].clientX, y1 = e.touches[0].clientY
			if(e.touches.length>1) x2 = e.touches[1].clientX, y2 = e.touches[1].clientY
			if(e.touches.length>2) x3 = e.touches[2].clientX, y3 = e.touches[2].clientY
			if(e.touches.length>3) x4 = e.touches[3].clientX, y4 = e.touches[3].clientY
			if(e.touches.length>4) x5 = e.touches[4].clientX, y5 = e.touches[4].clientY
			if(e.touches.length>5) x6 = e.touches[5].clientX, y6 = e.touches[5].clientY
		}

		window.addEventListener('touchstart') do(e)=>{
			start = 1
			start_x = e.touches[0].clientX
			start_y = e.touches[0].clientY
			swiped = 0
			update(e)
		}

		window.addEventListener('touchmove') do(e)=>{
			move = 1
			update(e)
			var x = e.touches[0].clientX
			var y = e.touches[0].clientY
			if( abs(start_y - y) < 10 && !swiped){
				var dx = start_x - x
				if(dx < -10) swiped = -1
				else if(dx > 10) swiped = +1
			}
			else{
				if(dx < -10 || dx > 10) swiped = 2
			}

		}

		window.addEventListener('touchend') do(e)=>{
			end = 1
			if(swiped == -1)swipeleft = 1
			if(swiped == 1) swiperight = 1
			update(e)
		}
	}
}

class Clipboard extends WorkerProxy{
	$constructor:(){
		// we have to create a textnode
		//return
		text = document.createElement('textarea')
		text.style.width = '100%'
		text.style.height = '100%'
		text.style.position = 'absolute'
		text.style.zIndex = -10000000
		document.body.appendChild(text)
		text.onpaste = (e)=>{
			var text = e.clipboardData.getData('text/plain')
			paste = text
		}

		text.addEventListener('keydown', function(e){
		})
	}

	signal paste

	set value(v){
		callHost('value', v)
	}

	focus(){
		callHost('focus')
	}

	$focus:(){
		text.focus()
	}

	$value:(v){
		text.value = v
		text.select()
		text.focus()
	}
}

class Key extends WorkerProxy{
	
	signal down, up, press

	$constructor:(){
		fireFoxTable = {
			93:91, // left mete
			224:92 // right meta
			61:187 // equals
			173:189 // minus
			59:186 // semicolon
		}
		
		var special_key_hack = false

		window.addEventListener('keydown') do(e)=>{
			var code = fireFoxTable[e.keyCode] || e.keyCode
			// we go into special mode
			if(e.keyCode == 229){
				special_key_hack = true
				return e.preventDefault()
			}
			var keyname = toKey[ code ]
			if( keyname ) this[ keyname ] = 1
			var msg = {	
				repeat: e.repeat
				code: code
				name: keyname
			}
			msg[msg.name] = 1
			down = msg
			if((e.ctrlKey || e.metaKey) && code == toCode.y){
				e.preventDefault()
			}
			if(code == toCode.tab){
				press = {
					repeat: e.repeat
					name: 'tab'
					value: '\t'
					char: 9
				}
				e.preventDefault()
			}
			else if(code == toCode.backspace){
				e.preventDefault()
			}
		}

		window.addEventListener('keyup') do(e)=>{
			var code = fireFoxTable[e.keyCode] || e.keyCode
			var keyname = toKey[ code ]

			if( keyname ) this[ keyname ] = 0
			var msg = {
				repeat: e.repeat
				code: code
				name: keyname
			}
			msg[msg.name] = 1
			if(special_key_hack){
				special_key_hack = false
				down = msg
			}

			up = msg
			if(code == toCode.tab || code == toCode.backspace){
				e.preventDefault()
			}
		}

		window.addEventListener('keypress') do(e)=>{
			if(e.metaKey || e.altKey || e.ctrlKey) return

			var code = e.charCode
			if(code == 13 || e.keyCode == 13) code = 10 // make newlines unix defaults
			else if(e.charCode == 0) return
			press = {
				repeat: e.repeat
				value: String.fromCharCode(code)
				char: code
			}
			e.preventDefault()
		}
	}

	toKey = { // slap a usable name on keys
		_t_:1, // flag for transfer
		8:'backspace',9:'tab',13:'enter',16:'shift',17:'ctrl',18:'alt',
		19:'pause',20:'caps',27:'escape',
		32:'space',33:'pgup',34:'pgdn',
		35:'end',36:'home',37:'leftarrow',38:'uparrow',39:'rightarrow',40:'downarrow',
		45:'insert',46:'delete',
		48:'num0',49:'num1',50:'num2',51:'num3',52:'num4',
		53:'num5',54:'num6',55:'num7',56:'num8',57:'num9',
		65:'a',66:'b',67:'c',68:'d',69:'e',70:'f',71:'g',
		72:'h',73:'i',74:'j',75:'k',76:'l',77:'m',78:'n',
		79:'o',80:'p',81:'q',82:'r',83:'s',84:'t',85:'u',
		86:'v',87:'w',88:'x',89:'y',90:'z',
		91:'leftmeta',92:'rightmeta',
		96:'pad0',97:'pad1',98:'pad2',99:'pad3',100:'pad4',101:'pad5',
		102:'pad6',103:'pad7',104:'pad8',105:'pad9',
		106:'multiply',107:'add',109:'subtract',110:'decimal',111:'divide',
		112:'f1',113:'f2',114:'f3',115:'f4',116:'f5',117:'f6',
		118:'f7',119:'f8',120:'f9',121:'f10',122:'f11',123:'f12',
		144:'numlock',145:'scrollock',186:'semicolon',187:'equals',188:'comma',
		189:'dash',190:'period',191:'slash',192:'accent',219:'openbracket',
		220:'backslash',221:'closebracket',222:'singlequote',
	}
	toCode = {
		_t_:1
	}

	for(var k in toKey){
		var key = toKey[ k ]
		toCode[key] = k
		signal( key, 0 )
	}
}

class Midi extends WorkerProxy{

	for(var i = 0;i<128;i++){
		signal('cc'+i, 0)
	}

	for(var i = 0;i<128;i++){
		signal('c'+i, 0)
	}

	$constructor:(){
		var pthis = this
		if(navigator.requestMIDIAccess){
			navigator.requestMIDIAccess({sysex:false}).then do(_midi)=>{
				midi = _midi
				for(var input from midi.inputs()){
					input.onmidimessage(m)=>{
						assert(m.data.length == 3)
						var b1 = m.data[0]
						var chan = m.data[0]&15
						var type = m.data[0]>>4
						this['c'+type] = m.data[2]/127
						if(type == 11){
							var code = m.data[1]
							var value = m.data[2]/127
							this['cc' + code] = value
						}
					}
				}
			}
			catch(e){
				console.log('MIDI ERROR', e)
			}
		}
	}
}

class Gamepad extends WorkerProxy{

	constructor(id){
		pad_id = id || 0
	}

	buttonTable = {
		cross:0
		square:2
		circle:1
		triangle:3
		left_hi:4
		right_hi:5
		left_low:6,
		right_low:7,
		select:8
		start:9
		left_click:10
		right_click:11
		up:12
		down:13
		left:14
		right:15
	}

	axesTable = {
		left_x:0
		left_y:1
		right_x:2
		right_y:3
	}
	buttonTableRev = {}
	axesTableRev = {}
	for(var k in buttonTable){
		buttonTableRev[buttonTable[k]] = k
		signal(k, 0)
	}
	for(var k in axesTable){
		axesTableRev[axesTable[k]] = k
		signal(k, 0)
	}
	// mark for transfer
	buttonTableRev._t_ = axesTableRev._t_ = 1

	$constructor:(){
		var firefoxTable = {
			14:'cross'
			15:'square'
			13:'circle'
			12:'triangle'
			10:'left_hi'
			11:'right_hi'
			8:'left_low'
			9:'right_low'
			0:'select'
			4:'start'
			1:'left_click'
			2:'right_click'
			4:'up'
			6:'down'
			7:'left'
			5:'right'
		}

		if(!navigator.getGamepads) return
		gamepads = navigator.getGamepads()
		// how do we hook the renderloop as something outside the render thing?
		ONE.drawloop.push() do()=>{
			// poll the gamepads!
			var pads = navigator.getGamepads()
			var pad = pads[pad_id]
			if(!pad) return

			console.log(pad.axes[0])
			// lets set some signals
			var buttons = pad.buttons
			var axes = pad.axes
			var len = buttons.length
			for(var i = 0; i < len;i++){
				var name = firefoxTable[i]
				var name = buttonTableRev[i]
				if(name && this['__'+name] != buttons[i].value){
					console.log(name, buttons[i].value)
					this[name] = buttons[i].value
				}
			}
			var len = axes.length
			for(var i = 0; i < len;i++){
				var name = axesTableRev[i]
				if(this['__'+name] != axes[i]){
					this[name] = axes[i]
				}
			}

			return true
		}
	}
}