// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
import math
import track
import glenums
import glsl

// super basic meshgens
define vec2Rect( x, y, w, h ){
	return vec2[6](
		x,y,   x+w,y,   x,y+h
		x+w,y, x+w,y+h, x,y+h
	)
}

define vec3Rect( x, y, w, h, z = 0 ){
	return vec3[6](
		x,y,z,   x+w,y,z,   x,y+h,z
		x+w,y,z, x+w,y+h,z, x,y+h,z
	)
}

define vec4Rect( x, y, w, h, z = 0, ww = 1 ){
	return vec4[6](
		x,y,z,ww,   x+w,y,z,ww,   x,y+h,z,ww
		x+w,y,z,ww, x+w,y+h,z,ww, x,y+h,z,ww
	)
}

class Draw extends WorkerProxy{
	
	prestructor(deep_outer){
		WorkerProxy::prestructor()
		if(deep_outer !== undefined){
			this.outer = deep_outer
			// identify deep_outer as being another Draw object
			if(Draw.isPrototypeOf(deep_outer)) parent = deep_outer
			else{
				parent = deep_outer.parent.layer
			}
		}
		if(!device){
			if(!parent.children) parent.children = []
			parent.children.push(this)
			device = parent.device
		}
	}

	// API available in draw
	clearAll:( vec3 col ){
		gl.clearColor(col.x, col.y, col.z, 1.0)
		//gl.colorMask(true, true, true, true)
		gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT)
	}

	clearAll_:( vec4 col ){
		gl.clearColor(col[0], col[1], col[2], col[3])
		gl.clearDepth( 1 )
		gl.clearStencil( 0 )
		//gl.colorMask(true, true, true, true)
		gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT)
	}

	clearDepth:(){
		gl.clear(gl.DEPTH_BUFFER_BIT)
	}
	
	drawChildren:(parent, sec){
		if(children) for(var c from children) c.draw(parent || this, sec)
	}
	
	// default draw
	draw:(){
		this{}
	}

	blend: alpha * pixel + (1 - alpha) * frame

	depth: pixel <= frame

	stencil: true

	type: triangle

	var fake_module = {types:{},imports:[],defines:{}}

	var jsblob_guid = 0
	var jsblob_guid_lut = {}

	class GenDrawJS extends AST.ToJS{
		
		context_resolve( name, n ){
			var prop  = main_this[name]
			if(typeof prop === 'function') throw new Error('Cannot use ' + name + ' because it doesnt exist on the main thread')
			if(prop !== undefined && typeof prop !== 'function'){
				if(prop._ast_){ // inline macro-like expansion
					var old_module = this.module
					var old_locals = this.locals
					this.module = prop.module
					this.locals = prop.locals
					var ret = expand(prop, n)
					this.locals = old_locals
					this.module = old_module
					return '(this.' + name + '=' + ret + ')'
				}
				//proxy_props[name] = dist
				if(prop._t_) n.infer = prop._t_
				else if (typeof prop == 'number'){
					n.infer = float
				}
				else if(typeof prop == 'boolean'){
					n.infer = bool
				}
				//n.infer = prop._t_ || float
				return 'this.' + name
			}
		} 

		// resolve a potential proxy_ref
		Key( n ){
			if(n.object.type == 'Id'){
				// TODO fix the resolution order on this one
				var objname = n.object.name
				var prop = main_this[objname]
				if(!(objname in this.scope) && prop && prop.__proxy__){
					var bind = proxy_refs[objname] || (proxy_refs[objname] = {})
					var keyname = n.key.name
					bind[keyname] = 1
					return 'this.' + objname + '.' + keyname
				}
			}
			return AST.ToJS::Key(n)
		}

		Nest( n ){
			// ok lets create the node we are inheriting from
			var sub_context
			if(n.fn.type == 'This'){
				sub_context = Object.create(main_this)
			}
			else{ // we have to resolve it on imm_locals
				var name = n.fn.name
				var obj = locals && locals[name] || main_this[name]

				if(!obj) throw new Error('Cannot resolve '+ name + ' in draw')

				if(!obj.hasOwnProperty('__class__')){ // we are a normal call
					proxy_refs[name] = 1
					return AST.ToJS::Nest(n)
				}

				sub_context = Object.create(obj)
				sub_context.parent = main_this
				sub_context.flatten_distance = 1
			}

			for(var step from n.body.steps){
				// we only support prop:value and learn(Other)
				if(step.type == 'Call'){ 
					throw new Error('Todo: Implement Call on immediate mode drawing')
				}
				else if(step.type == 'AssignQuote'){
					// alright lets store the 'quote' on my object
					sub_context[step.left.name] = step.quote
					step.quote.imm_locals = scope
					step.quote.module = this.module
				}
				else throw new Error('Unsupported statement '+step.type+' in immediate mode draw class')
			}

			// alright lets compile the bastard
			var uid = 'd' + ++this.uid

			var samplers = GenGLSL.samplers = {}

			// forward module and context
			GenGLSL.context = sub_context
			GenGLSL.main_this = main_this
			GenGLSL.main_uid = uid
			var attribs = GenGLSL.attribs = Object.create(null)
			var sub_attribs = GenGLSL.sub_attribs = Object.create(null)

			DepTraceGLSL.context = sub_context
			DepTraceGLSL.main_uid = uid
			DepTraceGLSL.main_this = main_this

			var pix = sub_context.pixel
			// handle case where pixel is a plain value
			if(pix !== undefined && !pix._ast_) pix = {type:'Id', name:'pixel', module:fake_module}
			if(!pix){
				// dont do anything
				return ''
			}
			// deptrace the pixelshader
			GenGLSL.pixel = DepTraceGLSL.pixel = 1
			DepTraceGLSL.proxy_refs = proxy_refs
			GenGLSL.refcount = DepTraceGLSL.refcount = {}
			
			var alpha = sub_context.alpha
			if(alpha){
				// alpha is a plain value
				if(!alpha._ast_) alpha = {type:'Id', name:'alpha', module:fake_module}
				DepTraceGLSL.module = alpha.module
				DepTraceGLSL[alpha.type](alpha)
			}

			DepTraceGLSL.module = pix.module
			DepTraceGLSL.imm_locals = pix.imm_locals
			DepTraceGLSL.locals = pix.locals
			DepTraceGLSL.renamed_uniforms = Object.create(null)
			DepTraceGLSL[pix.type](pix)

			//log(pix.bind.toDump())
			
			// codegen the pixelshader
			GenGLSL.uniform_id = 0
			GenGLSL.varying_id = 0
			GenGLSL.tmpvar_id = 0

			var pix_type_methods = GenGLSL.type_methods = {}
			var pix_uniforms = GenGLSL.uniforms = []
			var varyings = GenGLSL.varyings = []
			var pix_tmpvars = GenGLSL.tmpvars = []
			var pix_types = GenGLSL.types = {}
			//var signal_deps = GenGLSL.sigdeps = []
			// generate pixel shader GLSL
			GenGLSL.module = pix.module
			GenGLSL.imm_locals = pix.imm_locals
			GenGLSL.locals = pix.locals
			GenGLSL.renamed_uniforms = Object.create(null)
			var pix_expr = GenGLSL.expand(pix)

			var alpha_expr
			
			if(alpha){
				GenGLSL.module = alpha.module
				alpha_expr = GenGLSL.expand(alpha)
			}

			var always_opaque
			if(pix.infer.name == 'vec3'){
				if(alpha){
					pix_expr = 'vec4(' + pix_expr + ',' + alpha_expr + ')'
				}
				else{
					always_opaque = true
					pix_expr = 'vec4(' + pix_expr + ',' + '1.)'
				}
			} 
			else if(alpha){
				pix_expr = 'vec4((' + pix_expr +').rgb,' + alpha_expr + ')' 
			}

			// pull the vertex property from our context
			var vtx = sub_context.vertex
			if(!vtx || !vtx._ast_) throw new Error('Unexpected vertex type')
			// dependency trace vertex shader
			GenGLSL.pixel = DepTraceGLSL.pixel = 0
			GenGLSL.refcount = DepTraceGLSL.refcount = {}
			GenGLSL.module = vtx.module
			GenGLSL.imm_locals = vtx.imm_locals
			GenGLSL.locals = vtx.locals
			GenGLSL.types = vtx_types
			GenGLSL.renamed_uniforms = Object.create(null)

			DepTraceGLSL.module = vtx.module
			DepTraceGLSL.imm_locals = vtx.imm_locals
			DepTraceGLSL.locals = vtx.locals
			DepTraceGLSL.renamed_uniforms = Object.create(null)
			DepTraceGLSL[vtx.type](vtx)

			var vtx_type_methods = GenGLSL.type_methods = {}
			var vtx_uniforms = GenGLSL.uniforms = []
			var vtx_tmpvars = GenGLSL.tmpvars = []
			var vtx_types = GenGLSL.types = {}
			// generate vertex shader GLSL
			var vtx_expr = GenGLSL.expand(vtx)
			
			// patch up vertex position types just like color
			if(vtx.infer.name == 'vec3'){
				vtx_expr = 'vec4(' + vtx_expr + ',1.)'
			} 
			else if(vtx.infer.name == 'vec2'){
				vtx_expr = 'vec4(' + vtx_expr + ',0.,1.)'
			} 

			var vary_merged = ''
			var vary_decl = ''
			var vary_assign = ''
			var attr_decl = ''
			var pix_uni_decl = ''
			var vtx_uni_decl = ''
			var pix_uni_rename = ''
			var vtx_uni_rename = ''
			var ret = ''
			
			// merge identical varyings
			var vary_merge = {}
			// generate varying assigns
			for(var vary from varyings){
				
				GenGLSL.uniforms = vtx_uniforms
				var code = GenGLSL.expand(vary.node)
				var typename = vary.node.infer.name
				var key = typename + code
				var merge = vary_merge[key]
				if(?merge){
					vary_merged += `
				#define ${vary.name} ${merge}
					`
					continue
				}
				vary_merge[key] = vary.name
				vary_decl +=`
				varying ${typename} ${vary.name};
				`
				vary_assign += `
					${vary.name} = ${code};
				`
			}
			
			// generate pixel uniform
			for(var uni from pix_uniforms){
				var type = uni.node.infer
				var dim = ''
				if(type.dim) dim = '[' + type.dim + ']'
				if(uni.rename){
					pix_uni_decl += `
				${type.name} ${uni.name}${dim};
				uniform ${type.name} ${uni.rename}${dim};
					`
					pix_uni_rename +=`
					${uni.name} = ${uni.rename};
					`
				} 
				else{
					pix_uni_decl += `
				uniform ${type.name} ${uni.name}${dim};
					`
				}

			}
			
			// generate vertex uniform
			for(var uni from vtx_uniforms){
				var type = uni.node.infer
				var dim = ''
				if(type.dim) dim = '[' + type.dim + ']'
				if(uni.rename){
					vtx_uni_decl += `
				${type.name} ${uni.name}${dim};
				uniform ${type.name} ${uni.rename}${dim};
					`
					vtx_uni_rename +=`
					${uni.name} = ${uni.rename};
					`
				} 
				else{
					vtx_uni_decl += `
				uniform ${type.name} ${uni.name}${dim};
					`
				}
			}
			
			// generate samplers
			for(var sam_name in samplers){
				var sam = samplers[sam_name]
				if(sam.target&1){ // pixelshader
					pix_uni_decl += `
				uniform ${sam.type} ${sam_name};
					`
				}
				if(sam.target&2){ // vertexshader
					vtx_uni_decl += `
				uniform ${sam.type} ${sam_name};
					`
				}
			}

			// generate attribute declarations
			for(var name in attribs){
				var attr = attribs[name]
				if(attr.sub){ // sub attribute
					attr_decl += `
				attribute ${attr.sub.name} ${name};
				`
				}
				else{
					attr_decl += `
				attribute ${attr._t_.name} ${name};
				`
				}
			}

			var pix_tmpcode = ''
			
			// generate pixelshader tmpvars
			for(var i = pix_tmpvars.length - 1; i >=0; i--){
				var tmp = pix_tmpvars[i]
				pix_uni_decl += `
				${tmp.type} ${tmp.name};
				`
				pix_tmpcode += `
					${tmp.name} = ${tmp.value};
				`
			}

			var vtx_tmpcode = ''

			// generate vertexshader tmpvars
			for(var i = vtx_tmpvars.length - 1; i >=0; i--){
				var tmp = vtx_tmpvars[i]
				vtx_uni_decl += `
				${tmp.type} ${tmp.name}
				`
				vtx_tmpcode += `
					${tmp.name} = ${tmp.value};
				`
			}
			// generate pixelshader methods
			var pix_method_decl = ''
			for(var method in pix_type_methods){
				pix_method_decl += `
				${pix_type_methods[method]}
				`
			}

			// generate vertex shader methods
			var vtx_method_decl = ''
			for(var method in vtx_type_methods){
				vtx_method_decl += `
				${vtx_type_methods[method]}
				`
			}

			// generate pixelshader types
			var pix_type_decl = ''
			var pix_type_flat = Object.create(null)
			for(var type in pix_types){
				pix_type_decl += StructToGLSL('\t\t\t\t',pix_types[type], pix_type_flat)
			}

			// generate pixelshader types
			var vtx_type_decl = ''
			var vtx_type_flat = Object.create(null)
			for(var type in vtx_types){
				vtx_type_decl += StructToGLSL('\t\t\t\t',vtx_types[type], pix_type_flat)
			}

			// pixel shader
			var pix_shader = `
				#extension GL_OES_standard_derivatives : enable
				precision highp float;
				precision highp int;${pix_type_decl}
				${pix_uni_decl}${vary_decl}${vary_merged}${pix_method_decl}
				void main(){
					${pix_uni_rename}${pix_tmpcode}
					gl_FragColor = ${pix_expr};
				}
			`

			// vertex shader
			var vtx_shader = `
				precision highp float;
				precision highp int;${vtx_type_decl}
				${vtx_uni_decl}${attr_decl}${vary_decl}${vtx_method_decl}
				void main(){
					${vtx_uni_rename}${vtx_tmpcode}
					gl_Position = ${vtx_expr};
					${vary_assign}
				}
			`
			pix_shader = pix_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')
			vtx_shader = vtx_shader.replace(/\n\t/g,'\\n\\\n\t\t\t')
			if(context.dump){
				console.log(pix_shader.replace(/\\n\\\n\t\t\t\t\t\t/g,'\n'))
				console.log(vtx_shader.replace(/\\n\\\n\t\t\t\t\t\t/g,'\n'))

				var split1 = pix_shader.split(/\n/)
				pix_shader = ''
				for(var i =0;i<split1.length;i++){
					var last = i == split1.length - 1
					pix_shader += '/*' + (i+1) + '*/' + split1[i] + (last? '':'\n')
				}
				var split1 = vtx_shader.split(/\n/)
				vtx_shader = ''
				for(var i =0;i<split1.length;i++){
					var last = i == split1.length - 1
					vtx_shader += '/*' + (i+1) + '*/' + split1[i] + (last? '':'\n')
				}
			}


			// the shader compiler code body
			ret += `
				var gl = this.gl
				var skip = false
				var shader = this.${uid}_shader
				if(!shader){

					var pix_source = "${pix_shader}"
					var vtx_source = "${vtx_shader}"
					var cache_key = pix_source + vtx_source
					if(!gl._shadercache) debugger;
					shader = gl._shadercache[cache_key]
					if(!shader){
						var pix_shader = gl.createShader(${glc.FRAGMENT_SHADER})
						
						gl.shaderSource(pix_shader, pix_source)
						gl.compileShader(pix_shader)
						if (!gl.getShaderParameter(pix_shader, ${glc.COMPILE_STATUS})){
							var err = gl.getShaderInfoLog(pix_shader)
							console.log(err.toString())
							throw new Error(err)
						}
						
						var vtx_shader = gl.createShader(${glc.VERTEX_SHADER})
						gl.shaderSource(vtx_shader, vtx_source)
						gl.compileShader(vtx_shader)
						if (!gl.getShaderParameter(vtx_shader, ${glc.COMPILE_STATUS})){
							var err = gl.getShaderInfoLog(vtx_shader)
							console.log(err.toString())
							throw new Error(err)
						}
						
						shader = gl.createProgram()
						gl.attachShader(shader, vtx_shader)
						gl.attachShader(shader, pix_shader)
						gl.linkProgram(shader)
						gl._shadercache[cache_key] = shader
			`

			// generate sampler uniform fetch
			for(var sam_name in samplers){
				ret += `
						shader.ul_${sam_name} = gl.getUniformLocation(shader, "${sam_name}")`
			}

			// uniform expander helpers
			GenUniformJS.store_tempid = 1000*this.uid + 1

			GenUniformJS.type_methods = type_methods
			var uniform_parts = {
				init:'',
				setters:''
			}

			// generate uniform setters
			var if_id = 0
			for(var uni from pix_uniforms.concat(vtx_uniforms)){
				if_id++
				GenUniformJS.module = uni.module
				GenUniformJS.imm_locals = uni.imm_locals
				GenUniformJS.locals = uni.locals
				GenUniformJS.main_this = main_this
				GenUniformJS.main_uid = uid
				GenUniformJS.context = sub_context
				//GenUniformJS.proxy_props = proxy_props
				var deps = GenUniformJS.deps = Object.create(null)

				var js = GenUniformJS.expand(uni.node, n)
				//console.log(js, uni.node)
				var guid = jsblob_guid_lut[js] || (jsblob_guid_lut[js] = ++jsblob_guid)
				
				var if_str = ''
				var dbg_str = ''
				var as_str = ''
				var if_count = 0
				for(var k in deps){
					var type = deps[k]
					var name 
					if(name == 'this.u_outline'){
						//dbg_str += 'console.log(this.u_outline)'

					}
					if(type === 1) name = k // its an immediate local
					else{
						name = 'this.'+ k
						if(type.slots > 1){
							if_str = '1'
							as_str = ''
							break
						}
					}

					var store = k.replace('.', '_')
					if(if_str)if_str += ' || ', as_str += ', '
					if(if_dbg)if_dbg += ', ', if_dbg2 += '+'
					if_str += `shader.uv_${uni.name}_${store}_${guid} !== ${name}`
					as_str += `shader.uv_${uni.name}_${store}_${guid} = ${name}`
					if_count ++
				}

				if(!if_str) if_str = 'shader.once_' + if_id + ' !== '+guid, as_str = 'shader.once_' + if_id + ' = ' + guid
				uniform_parts.setters += `
				${dbg_str}
				if(${if_str}){
					${as_str}
					var v = ${js}\n`

				UniformTypeExpander(uni.node.infer, uniform_parts, uni.rename || uni.name, uni.rename || uni.name, 0)

				uniform_parts.setters += `
				}`
			}

			ret += '\n'+uniform_parts.init

			// fetch attribute locations
			for(var name in attribs)ret += `
						shader.al_${name} = gl.getAttribLocation(shader, "${name}")`
		
			// cache shader
			ret += 	`
					}
					this.${uid}_shader = shader`

			// create sub attribute buffers
			/*
			for(var name in sub_attribs){
				ret += `
					this.${uid}_vb_${name} = gl.createBuffer()`					
			}

			// create attribute buffers
			for(var name in attribs){
				if(attribs[name].sub) continue
				ret += `
					this.${uid}_vb_${name} = gl.createBuffer()`					
			}*/

			// done with the shader compile
			ret += `
				}
				gl.useProgram(shader)
				var item_count = 0
			`

			// sub attributes
			for(var name in sub_attribs){
				var sub_attr = sub_attribs[name]

				if(sub_attr._local_){
					buf_name = name
				}
				else{
					buf_name = 'this.' + name
					//proxy_props[name] = 1
				}

				ret += `
				
				var arr_buf = ${buf_name}
				item_count = arr_buf.length
				if(item_count){
					if(!arr_buf._uploaded_){
						if(!arr_buf._vb_) arr_buf._vb_ = gl.createBuffer()
						gl.bindBuffer(${glc.ARRAY_BUFFER}, arr_buf._vb_)
						gl.bufferData(${glc.ARRAY_BUFFER}, arr_buf._array_.buffer, ${glc.STATIC_DRAW})
						arr_buf._uploaded_ = true
					}
					else gl.bindBuffer(${glc.ARRAY_BUFFER}, arr_buf._vb_)
				`
				for(var sub in sub_attr){
					var type = sub_attr[sub]._t_
					var sub_type = type.fields[sub]
					var full_name = name + '_' + sub

					ret +=`
					var al = shader.al_${full_name}
					gl.enableVertexAttribArray(al)
					gl.vertexAttribPointer(al, ${sub_type.slots}, ${glc.FLOAT}, false, ${type.size}, ${sub_type.off})
				`
				}
				ret +=`
				}
				`
			}

			// plain attributes
			for(var name in attribs){
				var attr = attribs[name]
				if(attr.sub) continue
				var type = attr._t_
				var buf_name
				if(attr._local_){
					buf_name = name
				}
				else{
					buf_name = 'this.'+name
					//proxy_props[name] = 1
				}

				ret += `
				var arr_buf = ${buf_name}
				item_count = arr_buf.length
				if(item_count){
					if(!arr_buf._uploaded_){
						if(!arr_buf._vb_) arr_buf._vb_ = gl.createBuffer()
						gl.bindBuffer(${glc.ARRAY_BUFFER}, arr_buf._vb_)
						gl.bufferData(${glc.ARRAY_BUFFER}, arr_buf._array_.buffer, ${glc.STATIC_DRAW})
						arr_buf._uploaded_ = true
					}
					else gl.bindBuffer(${glc.ARRAY_BUFFER}, arr_buf._vb_)
					var al = shader.al_${name}
					gl.enableVertexAttribArray(al)
					gl.vertexAttribPointer(al, ${type.slots}, ${glc.FLOAT}, false, ${type.size}, 0)
				}
				`
			}
			ret +=`
				if(item_count){
			`
			// samplers
			var tex_id = 0
			for(var sam_name in samplers){
				var sam = samplers[sam_name]
				var state = sam.state
				// alright we now have to set up the texture.
				ret += `
				var img = this.${sam.source}
				if(img.loaded){
					var tex
					//console.log(this.${sam.source})
					if(!(tex = img.tex || img.${sam_name})){
						img.${sam_name} = tex = gl.createTexture()
						gl.bindTexture(${glc.TEXTURE_2D}, tex)
						gl.pixelStorei(${glc.UNPACK_FLIP_Y_WEBGL}, false)
						gl.pixelStorei(${glc.UNPACK_PREMULTIPLY_ALPHA_WEBGL}, false)
						if(img.data){
							gl.texImage2D(${glc.TEXTURE_2D}, 0, ${glc.RGBA}, img.w, img.h, 0, ${glc.RGBA}, ${glc.UNSIGNED_BYTE}, new Uint8Array(img.data)) 
						}
						else{
							gl.texImage2D(${glc.TEXTURE_2D}, 0, ${glc.RGBA}, ${glc.RGBA}, ${glc.UNSIGNED_BYTE}, img.img)
						}
						gl.texParameterf(${glc.TEXTURE_2D}, ${glc.TEXTURE_MIN_FILTER}, ${glc[state.MIN_FILTER]})
						gl.texParameterf(${glc.TEXTURE_2D}, ${glc.TEXTURE_MAG_FILTER}, ${glc[state.MAG_FILTER]})
						gl.texParameterf(${glc.TEXTURE_2D}, ${glc.TEXTURE_WRAP_S}, ${glc[state.WRAP_S]})
						gl.texParameterf(${glc.TEXTURE_2D}, ${glc.TEXTURE_WRAP_T}, ${glc[state.WRAP_T]})
					`
					if(sam.ismip) ret += `
						gl.generateMipmap(${glc.TEXTURE_2D})
					`
					ret +=`
						gl.bindTexture(${glc.TEXTURE_2D}, null)
					}
					gl.activeTexture(${glc.TEXTURE0 + tex_id})
					gl.bindTexture(${glc.TEXTURE_2D}, tex)
					gl.uniform1i(shader.ul_${sam_name}, ${tex_id})
				} 
				else{
					gl.activeTexture(${glc.TEXTURE0 + tex_id})
					gl.bindTexture(${glc.TEXTURE_2D}, null)
					var notify = this.${sam.source}._notify || (this.${sam.source}._notify = {})
					notify[this.__proxy__] = this
					skip = true
				}
				`
				tex_id ++ 
			}

			// alpha blending decoding
			var color_blend = DecodeBlendEquation(sub_context.blend)
			if(sub_context.blend_alpha){
				var alpha_blend = sub_context.blend_alpha
				ret += `
				gl.enable(${glc.BLEND})
				gl.blendEquationSeparate(${color_blend.op},${alpha_blend.op})
				gl.blendFuncSeparate(${color_blend.src},${color_blend.dst},${alpha_blend.src},${alpha_blend.dst})
				`
			}
			else if(color_blend){
				if((always_opaque && color_blend.op == glc.FUNC_ADD && color_blend.dst == glc.ONE_MINUS_SRC_ALPHA && color_blend.src == glc.SRC_ALPHA) ||
					color_blend.op == glc.FUNC_ADD && color_blend.dst == glc.ZERO && color_blend.src == glc.ONE){
					ret += `
				gl.disable(${glc.BLEND})
				`
				}
				else{
					ret += `
				gl.enable(${glc.BLEND})
				gl.blendEquation(${color_blend.op})
				gl.blendFunc(${color_blend.src},${color_blend.dst})
					`
				}
			}

			// fix the depth check
			var depth = sub_context.depth
			if(depth){
				if(depth.type == 'Value' && (depth.value === true || depth.value === false)){
					if(depth.value === true) ret += `
				gl.disable(${glc.DEPTH_TEST})
					`
					else ret += `
				gl.enable(${glc.DEPTH_TEST})
				gl.depthFunc(${glc.NEVER})
					`
				} 
				else if(depth.type == 'Logic' && depth.left.name == 'pixel' && depth.right.name == 'frame'){
					ret +=`
				gl.enable(${glc.DEPTH_TEST})
				gl.depthFunc(${glsl_compare[depth.op]})
					`
				}
			}
			else throw new Error('Unsupported depth equation')

			// drawing function
			ret += `
				${uniform_parts.setters}
				if(!skip)gl.drawArrays(${glc.TRIANGLES}, 0, item_count)
				}
			`
			// correctly indent the code
			ret = ret.replace(/\n\t\t\t\t/g, '\n' + this.indent)
			return ret
		}
	}

	hideProperties(Object.keys(this))
	// make a singleton copy of Time
	time = Time.new()

	$constructor:(){
		if(!parent.children) parent.children = []
		parent.children.push(this)
		gl = parent.gl
		device = parent.device
		if(pass) device.passes.push(this)
		if(once) device.once_list.push(this)
	}

	$flagDirty:(){
		redraw()
	}

	$redraw:(){
		// only allow redraw flagging to happen 
		if(!device) return
		var p = this
		while(p && !p._dirty){
			p._dirty = true
			p = p.parent
		}
		if(!device.anim_req){
			device.anim_req = true
			if(device.drawloop)window.requestAnimationFrame(device.drawloop)
		}		
	}

	// the proxy code generator
	$draw(){
		// so lets stringify it.
		var code = ''

		// make a fresh scope and signals store
		var js = GenDrawJS
		js.new_state()
		// plug the module of the ast node
		js.context = this
		js.main_this = this
		//js.proxy_props = proxy_props  || (proxy_props = {})
		js.proxy_refs = proxy_refs //|| (proxy_refs = {})

		//proxy_refs.parent = {}
		js.uid = 0
		js.store_tempid = 1
		js.store_pretemp = 'this._store1._'

		code += 'this.prestructor = function(){ this._store1 = {}, this._store2 = {} }\n'
		if(debug_draw) debug_draw(js)

		var swap = 'var _store = this._store2;this._store2 = this._store1;this._store1 = _store;this._dirty = false;'

		if(draw){
			var flags = js.pull_flags(draw)
			if(draw.type != 'Function') throw new Error('GL Draw not a function')
			js.module = draw.module
			js.locals = draw.locals
			code += 'this.draw = ' + js.Function(draw, undefined, [], undefined, [], swap) + '\n'
		}

		var swap = 'var _store = this._store2;this._store2 = this._store1;this._store1 = _store'
		if(pass){
			var flags = js.pull_flags(pass)
			if(pass.type != 'Function') throw new Error('GL Pass not a function')
			js.module = pass.module
			js.locals = pass.locals
			code += 'this.pass = ' + js.Function(pass, undefined, [], undefined, [], swap) + '\n'
		}

		if(once){
			var flags = js.pull_flags(once)
			if(once.type != 'Function') throw new Error('GL Once not a function')
			js.module = once.module
			js.locals = once.locals
			code += 'this.once = ' + js.Function(once, undefined, [], undefined, [], '') + '\n'
		}

		var rem = 'this._cleanup = function(){\n'
		for(var i = 0;i<js.uid;i++){
			rem += '\tthis.d'+(i+1)+'_shader = undefined\n'
		}
		rem += '}\n'

		code += rem



		/*
		// we have to generate redraw binding code for proxy_bind

		for(var ref in proxy_refs){
			var props = proxy_refs[ref]
			for(var prop in props){
				var pname = 'this.' + ref + '.' + prop
				code += 'if(' + pname + '_hook)' + pname + '_hook(this)\n'
				rem += '\tif(' + pname + '_unhook)' + pname + '_unhook(this)\n'
			}
		}
		rem += '}\n'
		code += rem
		*/
	
		// prepend static type_methods
		for(var k in js.type_methods){
			code = js.type_methods[k] + '\n'+ code
		}

		if(flags.indexOf('js') != -1) out(code)
		
		if(dump){ 
			// lets fancy up the shader code with linenumbers
			console.log(code)
		} 

		return code
	} 

} 

// lets first load up the image somehow
class Texture extends WorkerProxy{
	  
	_sampler2D_ =  1
    
	buf = 0

	constructor(type, w, h){
		if(type){
			this.type = type
			this.w_ = w ?| null
			this.h_ = h ?| null
		}
	}

	url(geturl){
		var obj = new()
		obj.url = geturl
		return obj
	}

	array(data, w, h){
		var obj = new()
		obj.data = data
		data._t_ = 1 // make sure its transferred
		obj.w = w
		obj.h = h
		return obj
	}

	// framebuffer constructors
	// lets make a generator with a bunch of flags.
	var buf_list = [
		'rgb'
		'rgba'
		'luminance'
		'alpha'
		'alpha_luminance'
		'luminance_alpha'
	]
	var bpp_list = [
		''
		'_half_float'
		'_float'
		'_half_float_linear'
		'_float_linear'
	]
	var attach_list = [
		''
		'_depth'
		'_stencil'
		'_stencil_depth'
		'_depth_stencil'
	]
	var num_list = [
		''
		'_flipped'
	]

	function gen_call(name){
		return function(w, h){
			return Texture.new(name, w, h)
		}
	}

	function gen_api(){
		for(var buf from buf_list){
			for(var bpp from bpp_list){
				for(var attach from attach_list){
					for(var num from num_list){
						var name = buf + bpp + attach + num
						this[name] = gen_call(name)
					}
				}
			}
		}
	}
	gen_api()

	call:(float x, float y){
		return texture2D(this, vec2(x, y), {
			MIN_FILTER:LINEAR
			MAG_FILTER:LINEAR
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}

	call_:(vec2 p){
		return texture2D(this, p, {
			MIN_FILTER:LINEAR
			MAG_FILTER:LINEAR
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}

	sample:(vec2 v){
		return texture2D(this, v, {
			MIN_FILTER:LINEAR
			MAG_FILTER:LINEAR
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}

	flipped:(vec2 v){
		return texture2D(this, vec2(v.x, 1.-v.y), {
			MIN_FILTER:LINEAR
			MAG_FILTER:LINEAR
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}
	
	point:(vec2 v){
		return texture2D(this, vec2(v.x, v.y), {
			MIN_FILTER:NEAREST
			MAG_FILTER:NEAREST
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}

	point_flipped:(vec2 v){
		return texture2D(this, vec2(v.x, 1.-v.y), {
			MIN_FILTER:NEAREST
			MAG_FILTER:NEAREST
			WRAP_S:CLAMP_TO_EDGE
			WRAP_T:CLAMP_TO_EDGE
		})
	}

	// speed up proxy enumeration
	hideProperties(Object.keys(this))

	size = vec2(0, 0)

	// remote nesting syntax
	$call:(self, nest, pthis){

		var gl = pthis.gl
		var device = pthis.device
		var img_obj = self
		var old_frame = gl._curFrame

		var img = img_obj

		if(img_obj.flipped){ // pick the buffer
			var buf1 = img_obj.buf1 || (img_obj.buf1 = {})
			var buf2 = img_obj.buf2 || (img_obj.buf2 = {})
			buf2.type = buf1.type = img_obj.type
			buf2.w_ = buf1.w_ = img_obj.w_
			buf2.h_ = buf1.h_ = img_obj.h_
			img = buf1
		}

		var width = 0
		var ratio = 1

		if(img.w_ === null) width = old_frame.w, ratio = old_frame.ratio
		else if(img.w_ <= 1) width = old_frame.w * img.w_, ratio = 1
		else width = img.w_

		var height = 0
		if(img.h_ === null) height = old_frame.h, ratio = old_frame.ratio
		else if(img.h_ <= 1) height = old_frame.h * img.h_, ratio = 1
		else height = img.h_, ratio = 1

		if(!img.buf || img.h != height || img.w != width){
			img.w = width
			img.h = height
			img.buf = img.buf || gl.createFramebuffer()
			var tex = img.tex = img.tex || gl.createTexture()
			var type = img.type

			gl.bindTexture(gl.TEXTURE_2D, tex)
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)

			var buf_type = gl.RGB
			if(type.indexOf('luminance') != -1 ){
				buf_type = gl.LUMINANCE
				if(type.indexOf('alpha') != -1 ) buf_type = gl.LUMINANCE_ALPHA
			}
			else if(type.indexOf('alpha') != -1 ) buf_type = gl.ALPHA
			else if(type.indexOf('rgba') != -1) buf_type = gl.RGBA

			var data_type = gl.UNSIGNED_BYTE
			if(img.type.indexOf('half_float_linear') != -1){
				var ext = gl._getExtension('OES_texture_half_float_linear')
				if(!ext) throw new Error('No OES_texture_half_float_linear')
				data_type = ext.HALF_FLOAT_LINEAR_OES
			}
			else if(img.type.indexOf('float_linear') != -1){
				var ext = gl._getExtension('OES_texture_float_linear')
				if(!ext) throw new Error('No OES_texture_float_linear')
				data_type = ext.FLOAT_LINEAR_OES
			}
			else if(img.type.indexOf('half_float') != -1){
				var ext = gl._getExtension('OES_texture_half_float')
				if(!ext) throw new Error('No OES_texture_half_float')
				data_type = ext.HALF_FLOAT_OES
			}
			else if(img.type.indexOf('float') != -1){
				var ext = gl._getExtension('OES_texture_float')
				if(!ext) throw new Error('No OES_texture_float')
				data_type = gl.FLOAT
			}

			gl.texImage2D(gl.TEXTURE_2D, 0, buf_type, width, height, 0, buf_type, data_type, null)

			gl.bindFramebuffer(gl.FRAMEBUFFER, img.buf)
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, img.tex, 0)

			var has_depth = type.indexOf('depth') != -1 
			var has_stencil = type.indexOf('stencil') != -1
			if(has_depth || has_stencil){

				img.depth = img.depth || gl.createRenderbuffer()

				var dt = gl.DEPTH_COMPONENT16, at = gl.DEPTH_ATTACHMENT
				if(has_depth && has_stencil) dt = gl.DEPTH_STENCIL, at = gl.DEPTH_STENCIL_ATTACHMENT
				else if(has_stencil) dt = gl.STENCIL_INDEX, at = gl.STENCIL_ATTACHMENT

	    		gl.bindRenderbuffer(gl.RENDERBUFFER, img.depth)
	    		gl.renderbufferStorage(gl.RENDERBUFFER, dt, width, height)
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER, at, gl.RENDERBUFFER, img.depth)

				gl.bindRenderbuffer(gl.RENDERBUFFER, null)
			}
			gl.bindTexture(gl.TEXTURE_2D, null)
			img.loaded = true
		}
		else {
			gl.bindFramebuffer(gl.FRAMEBUFFER, img.buf)
		}
		gl._curFrame = img
		gl.viewport(0, 0, img.w, img.h)//img.w / gl.ratio, img.h / gl.ratio)
		device.w = img.w / ratio, device.h = img.h/ ratio
		
		if(img_obj.flipped){
			img_obj.tex = img_obj.buf2.tex
			if(img_obj.tex) img_obj.loaded = true
			img_obj.w = img.w
			img_obj.h = img.h
		}

		nest.call(pthis)

		if(img_obj.flipped){ // flip the buffers
			var buf = img_obj.buf2
			img_obj.buf2 = img_obj.buf1
			img_obj.buf1 = buf
			img_obj.tex = img_obj.buf2.tex // now use this texture
		}

		gl._curFrame = old_frame
		if(!old_frame.buf) gl.bindFramebuffer(gl.FRAMEBUFFER, null)
		else gl.bindFramebuffer(gl.FRAMEBUFFER, old_frame.buf)
		gl.viewport(0, 0, old_frame.w, old_frame.h)//img.w / gl.ratio, img.h / gl.ratio)
		device.w = old_frame.w / device.ratio, device.h = old_frame.h / device.ratio
		device.ratio = old_frame.ratio

	}

	// remote initializer
	$constructor:(parent){
		if(url){
			// if its a .bin file we load it with XHR
			img = new window.Image()
			img.onload()=>{
				loaded = true
				if(_notify){
					for(var k in _notify){
						_notify[k].flagDirty()
					}
				}
			}
			img.src = url
		}
		else if(data){
			loaded = true
		}
		else if(type){
			flipped = type.indexOf('flipped') != -1
		}
	}

}

class Device extends Draw{

	prestructor(){
		WorkerProxy::prestructor()
		device = this // buck stops here
	}

	// stop the constructor going up
	constructor(){
	}

	fill = #black

	frame = Texture.rgb_depth_stencil()
	// placeholder framebuffer
	
	// settings flags
	antialias = false
	premultipliedAlpha = false
	preserveDrawingBuffer = false
	preferLowPowerToHighPerformance = false

	draw:(parent, sec){
		if(fill) clearAll(fill)
		drawChildren(this, sec)
	}

	// signal a redraw
	redraw(){
		callHost('redraw')
	}

	$redraw:(){
		if(!anim_req){
			anim_req = true
			window.requestAnimationFrame(drawloop)
		}
	}

	frame_id = 0

	$drawloop:(now){
		if(frame_limit && frame_id >= frame_limit) return
		if(frame_rate){
			document.title = parseInt(1000/(now - last))
			last = now
		}
		frame_id ++

		anim_req = false
		var do_next = false
		// call update
		if(!start) start = now
		sec = (now - start) / 1000

		time.sec = sec

		if(once_list.length){
			var once = once_list
			once_list = []
			for(var o from once){
				o.once(sec)
			}
		}
		if(ONE.drawloop.length){
			for(var call from ONE.drawloop){
				if(call(this, sec)) do_next = true
			}
		}
		for(var p from passes){
			p.pass(sec)
		}
		if(pass) pass(sec)
		draw(this, sec)

		if(do_next || time.hasBinds('sec')){
			if(!anim_req){
				anim_req = true
				window.requestAnimationFrame(drawloop)
			}
		}
	}

	$constructor:(parent){
		children = []
		if(!parent) parent = document.body

		canvas = document.createElement("canvas")
		parent.appendChild(canvas)
		var options = {
			alpha: frame.type.indexOf('rgba') != -1
			depth: frame.type.indexOf('depth') != -1
			stencil: frame.type.indexOf('stencil') != -1
			antialias: antialias
			premultipliedAlpha: premultipliedAlpha
			preserveDrawingBuffer: preserveDrawingBuffer
			preferLowPowerToHighPerformance:preferLowPowerToHighPerformance
		}
		var _gl = gl = canvas.getContext('webgl',options) || 
			canvas.getContext('webgl-experimental')

		// extension cache
		_gl._getExtension(name){
			var ext = _gl[name]
			if(ext) return ext
			return _gl[name] = _gl.getExtension(name)
		}

		// require derivatives
		_gl._getExtension('OES_standard_derivatives')

		// debugtracer for gl api
		function gl_tracer(gl){
			var gl_rev = {}
			function gl_trace( name, original ){
				return function(){
					if(window._gl_stop_trace) return original.apply(gl, arguments)
					var str = [];
					for(var i = 0; i<arguments.length; i++){
						var a = arguments[i], t
						if(a && (t = glrev[a])) str.push(a + " = gl." + t + "")
						else if(a === undefined) str.push('undefined')
						else if(a === null) str.push('null')
						else str.push(a)
					}
					var ret = original.apply(gl, arguments)
					console.log("gl." + name + "(" + str.join(", ") + ")" + ((ret !== undefined)?(" -> " + ret):""))
					return ret
				}
			}			
			for(var key in gl){
				if(typeof gl[key] == 'function'){
					var remap = '__' + key
					gl[key] = gl_trace(key, gl[remap] = gl[key])

					gldump( k )
				} else {
					glrev[gl[k]] = k;
				}
			}
		}
		if(this.debug) gl_tracer(gl)
		
		anim_req = false
		gl._shadercache = {}
		gl.loop = [] 
		gl.redraw()=>{
			if(!anim_req){
				anim_req = true
				window.requestAnimationFrame(drawloop)
			}
		}
		passes = []
		once_list = []
		
		//canvas.webkitRequestFullscreen()
		window.onresize = =>{
			var pixelRatio = window.devicePixelRatio
			var w = parent.offsetWidth
			var h = parent.offsetHeight
			var sw = w * pixelRatio
			var sh = h * pixelRatio
			gl.width = canvas.width = sw
			gl.height = canvas.height = sh
			canvas.style.width = w + 'px'
			canvas.style.height = h + 'px'
			_gl.viewport(0, 0, sw, sh)
			// store our w/h and pixelratio on our frame
			frame.ratio = ratio || pixelRatio
			this.w = (frame.w = sw) / frame.ratio
			this.h = (frame.h = sh) / frame.ratio
			this.ratio = frame.ratio
			redraw()
			// todo, fire event?
		}
		// lets request an init
		last = 0
		window.count = 0
		window._gl= gl
		//document.body.addEventListener('mousedown', function(){
		//	document.body.webkitRequestFullscreen()
		//})

		drawloop = drawloop.bind(this)

		anim_hooks = []

		anim_hook(cb){
			var idx = anim_hooks.push(cb) - 1
			if(!idx && !anim_req){
				anim_req = true
				window.requestAnimationFrame(drawloop)
			}
			return idx
		}

		anim_unhook(cb, idx){
			var idx = anim_hooks.indexOf(cb)
			if(idx != -1) anim_hooks.splice(idx, 1)
		}

		// extend the GL API
		gl._curFrame = frame

		window.onresize()
	}
}
