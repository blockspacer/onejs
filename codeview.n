import math
import gl
import glscene
import distfield2d

class CodeViewTypes{

	// Base node markers
	_Id:1
	_Value:2
	_This:3
	_Array:4
	_Object:5
	_Index:6
	_Key:7
	_ThisCall: 8

	_Block:9
	_List: 10
	_Comprehension:11
	_Template: 12
	_Break:13
	_Continue:14
	_Label:15

	_If:16
	_Switch:17
	_Case:18

	_Throw:19
	_Try:20

	_While:21
	_DoWhile:22
	_For:23
	_ForIn:24
	_ForOf:25
	_ForFrom:26
	_ForTo:27

	_Var:28
	_TypeVar:29
	_Struct:30
	_Define:31
	_Enum:32

	_Def:33

	_Function:34
	_Return:35
	_Yield:36
	_Await:37

	_Unary:38
	_Binary:39
	_Logic:40
	_Assign:41
	_Update:42
	_Condition:43

	_New:44
	_Call:45
	_Nest:46

	_Class:47
	_Signal:48
	_Quote:49
	_AssignQuote:50
	_Rest:51
	_Then:52
	_Comment:53

	// second level markers
		_Id:1
		_Paren:2
			_ParenL:1
			_ParenR:2
		_Brace:3
			_BraceL:1
			_BraceR:2
		_Bracket:4
			_BracketL:1
			_BracketR:2

		_Comma:5
		_Colon:6
		_DColon:7
		_Dot:8
		_SemiColon:9

		_Operator:10
			_Plus:1
			_Min:2
			_Div:3
			_Mul:4
			_Pow:5
			_Shl:6
			_Shr:7
			_EQ:8
			_NEQ:9
			_GT:10
			_LT:11
			_GTE:12
			_LTE:13
			_Plusplus:14
			_Minmin:15
			_Assign:16
			_PlusAssign:17
			_MinAssign:18
			_MulAssign:19
			_DivAssign:20
			_ShlAssign:21
			_ShrAssign:22
			_TerniaryQ:23
			_TerniaryC:24
			_Signal:25
		_String:11
		_Number:12
		_Tab:13
		_Keyword:14
		_Color:15
	mode_whitespace = true
}

// only load CodeViewImpl on something that has a text interface
class CodeViewImpl{

	DColon(type, group){
		syntaxText('::', group, type, _DColon)
	}

	Dot(type, group){
		syntaxText('.', group, type, _Dot)
	}

	Colon(type, group){
		syntaxText(':', group, type, _Colon)
	}

	SemiColon(type, group){
		syntaxText(';', group, type, _SemiColon)
	}

	Comma(type, group){
		syntaxText(',', group, type, _Comma)
	}

	ParenL(type, group){
		syntaxText('(', group, type, _Paren, _ParenL)
	}

	ParenR(type, group){
		syntaxText(')', group, type, _Paren, _ParenL)
	}
	BraceL(type, group){
		syntaxText('{', group, type, _Brace, _BraceL)
	}

	BraceR(type, group){
		syntaxText('}', group, type, _Brace, _BraceR)
	}

	BracketL(type, group){
		syntaxText('[', group, type, _Bracket, _BracketL)
	}

	BracketR(type, group){
		syntaxText(']', group, base, _Bracket, _BracketR )
	}

	var op_lut = {
		'++':_Plusplus
		'--':_Minmin
		'+':_Plus
		'-':_Min
		'/':_Div
		'*':_Mul
		'**':_Pow
		'==':_EQ
		'!=':_NEQ
		'>':_GT
		'<':_LT
		'=>':_GTE
		'<=':_LTE
		'<<':_Shl
		'>>':_Shr
		'=':_Assign
		':=':_Signal
		'+=':_PlusAssign
		'-=':_MinAssign
		'/=':_DivAssign
		'*=':_MulAssign
		'<<=':_ShlAssign
		'>>=':_ShrAssign
		'?':_TerniaryQ
		':':_TerniaryC
	}

	Operator(op, type, group){
		var col = op_lut[op]
		syntaxText(op, group, type, _Operator, col)
	}

	Keyword(value, type, group){
		syntaxText(value, group || 0, type, _Keyword)
	}

	// AST Expander
	expand(n, arg){
		if(n){
			if(!this[n.type]) throw new Error('type '+n.type+' not in codeview')
			else this[n.type](n, arg)
		}
	}

	Program(n){
		Block(n, true)

	}

	Empty(n){}

	syntaxText(text, group, l1, l2, l3){
		if(l1 && l1._ast_)l1 = l1.value
		if(l2 && l2._ast_)l2 = l2.value
		if(l3 && l3._ast_)l3 = l3.value
		tag_x = group
		tag_y = 65536*(l1||0)+256*(l2||0)+(l3||0)
		string(text)
	}

	debug(){
		syntaxText('@')
	}

	Id(n, is_type){//{ name:0, flag:0, typing:1 },
		if(n.typing){
			expand(n.typing, true)
			space()
		}
		if(n.flag){
			syntaxText('#'+n.name, group++, _Id, _Color)
		}
		else {
			if(is_type){
				syntaxText(n.name, group++, _TypeVar, _TypeVar)
			}
			else
				syntaxText(n.name, group++, _Id, _Id)
		}
	}

	Value(n){//: { value:0, raw:0, kind:0, multi:0 },
		if(n.kind == 'num')
			syntaxText(n.raw, group++, _Value, _Number)
		else if(n.kind == 'string')
			syntaxText(n.raw, group++, _Value, _String)
		else
			syntaxText(n.raw, group++, _Value)
	}
	
	This(n){//: { },
		syntaxText('this', group++, _This, _Keyword)
	}

	Array(n){//: { elems:2 },
		var mygroup = group++
		BracketL(_Array, mygroup)

		var has_newlines = false
		if(Comments(n.cm1)) has_newlines = true
		var old_indent = indent
		indent++

		for(var i, elem from n.elems){
			if(!has_newlines && i) Comma(_Array, group++)
			Comments(elem.cmu)
			if(lastIsNewline()) tab(indent)
			expand(elem)
			if(has_newlines && !Comments(elem.cmr))
				newline()
		}
		if(has_newlines && Comments(n.cm2)) tab(indent-1)

		indent = old_indent
		BracketR(_Array, mygroup)
	}
	Object(n){//: { keys:3 },
		var mygroup = group++
		BraceL(_Object, mygroup)
		// allright so
		var has_newlines = false
		if(Comments(n.cm1)) has_newlines = true
		var old_indent = indent
		indent++

		for(var i, prop from n.keys){
			if(!has_newlines && i){
				Comma(_Object, group++)
				space()
			}
			if(lastIsNewline()) tab(indent)
			if(has_newlines) Comments(prop.cmu)
			if(lastIsNewline()) tab(indent)

			expand(prop.key)
			if(prop.value){
				Colon(_Object)
				expand(prop.value)
			}
			if(has_newlines && !Comments(prop.cmr)){
				newline()
			}

		}
		if(has_newlines){
		 	Comments(n.cm2)
			if(lastIsNewline()) tab(old_indent)
		}
		indent = old_indent
		BraceR(_Object, mygroup)
	}
	Index(n, istype){//: { object:1, index:1 },
		expand(n.object, istype)
		var mygroup = group++
		BracketL(_Index, mygroup)
		if(n.index) expand(n.index)
		BracketR(_Index, mygroup)
	}
	Key(n){//: { object:1, key:1, exist:0 },
		expand(n.object)
		if(n.cm1 && Comments(n.cm1,' ')){
			tab(indent+1)
		}
		Dot(_Key)
		if(n.cm2 && Comments(n.cm2,' ')){
			tab(indent+1)
		}
		expand(n.key)
	}
	ThisCall(n){//: { object:1, key:1 },
		expand(n.object)
		DColon(_ThisCall)
		expand(n.key)
	}

	lastIsNewline(){
		return charCodeAt(char_count - 1) === 10
	}

	Comment(text, pre){
		if(lastIsNewline()) tab(indent), pre = ''
		syntaxText((pre||'')+'//'+text, group++, _Comment)
	}

	class CollectComments extends AST.Walk{
		Pre(n){
			if(n.comments) output.push.apply(output, n.comments)
		}
		Block(n){
			// dont go into a block
		}
	}

	// processes comments up until 2
	Comments(comments, prefix){
		var has_newline = false
		if(!comments) return false
		for(var i = 0; i < comments.length; i++){
			var comment = comments[i]
			if(comment === 1){
				if(lastIsNewline()) tab(indent)
				newline()
				has_newline = true
			}
			else Comment(comment, prefix)
		}
		return has_newline
	}

	Block(n, skipbrace){//:{ steps:2 },
		var mygroup = group++
		var old_indent = 0
	
		if(!skipbrace){
			BraceL(_Block, mygroup)
			old_indent = indent
			indent++
			// lets output our immediate follow comments
		}

		Comments(n.cm1,' ')
		if(!skipbrace){
			if(!lastIsNewline()) newline()
		}

		for(var len, i, step from n.steps){
			// if we have comments above, insert them
			Comments(step.cmu)
			if(lastIsNewline()) tab(indent)
			expand(step)
			Comments(step.cmr,' ')
			if(!lastIsNewline()) newline()
		}
		Comments(n.cm2)
		if(!skipbrace){
			// lets add our tail comments
			indent = old_indent
			if(!lastIsNewline()){
				newline()
			}
			tab(old_indent)
			BraceR(_Block, mygroup)
		}
	}
	List(n){//: { items:2 },
		for(var i, item from n.items){
			if(i) Comma(_List)
			expand(item)
		}
	}

	Comprehension(n){//:{ for:1, expr:1 },
	}
	Template(n){//: { chain:2 },
	}

	Break(n){//: { label:1 },
		Keyword('break', _Break)
	}
	Continue(n){//: { label:1 },
		Keyword('continue', _Continue)
	}
	Label(n){//: { label:1, body:1 },
		expand(n.label)
		expand(n.body)
	}
	If(n){//: { test:1, then:1, else:1, postfix:0, compr:0 },
		Keyword('if', _If)
		var mygroup = group++
		space()
		ParenL(_If, mygroup)
		expand(n.test)
		ParenR(_If, mygroup)
		space()
		// if our n.then has wsu, lets do it
		if(n.then.cmu){
			if(Comments(n.then.cmu)) tab(indent+1)
		}
		expand(n.then)
		if(n.else){
			// we have to end the if expression properly
			if(!Comments(n.cm1,' ')) newline()
			
			if(lastIsNewline()) tab(indent)

			Keyword('else', _If)
			space()
			if(n.else.cmu){
				if(Comments(n.else.cmu)) tab(indent+1)
			}
			expand(n.else)
			//debug()
		}
	}
	Switch(n){//: { on:1, cases:2 },
		Keyword('switch', _Switch)
		space()
		var mygroup = group++
		ParenL(_Switch, mygroup)
		expand(n.on)
		ParenR(_Switch, mygroup)
		space()
		BraceL(_Switch, mygroup)

		//var old_indent = indent
		//indent++

		if(!Comments(n.cm1)){
			newline()
			tab(indent)
		}

		for(var c from n.cases){
			expand(c)
		}
		Comments(n.cm2)
		//indent = old_indent
		if(lastIsNewline()) tab(indent)
		BraceR(_Switch, mygroup)
	}
	Case(n){//: { test:1, then:2 },
		Comments(n.cmu)
		if(!lastIsNewline()) newline()
		tab(indent)
		Keyword('case', _Case)
		space()
		expand(n.test)
		Colon(_Case)
		Comments(n.cmr)

		if(n.steps && n.steps.length){
			if(!lastIsNewline()) newline()
			var old_indent = indent
			indent++
			tab(indent)
			Block(n, true)
			indent = old_indent
		}
		//expand(n.then)
	}
	Throw(n){//: { arg:1 },
		Keyword('throw', _Throw)
		space()
		expand(n.arg)
	}
	Try(n){//: { try:1, arg:1, catch:1, finally:1 },
		Keyword('try', _Try)
		expand(n.try)
		Keyword('catch', _Try)
		var mygroup = group++
		ParenL(_Try, mygroup)
		expand(n.arg)
		ParenR(_Try, mygroup)
		expand(n.catch)
		if(n.finally){
			Keyword('finally', _Try)
			expand(n.finally)
		}
	}
	While(n){//: { test:1, loop:1 },
		Keyword('while', _While)
		var mygroup = group++
		ParenL(_While, mygroup)
		expand(n.test)
		ParenR(_While, mygroup)
		expand(n.loop)
	}
	DoWhile(n){//: { loop:1, test:1 },
		Keyword('do', _Do)
		expand(n.loop)
		Keyword('while', _Do)
		var mygroup = group++
		ParenL(_Do, mygroup)
		expand(n.test)
		ParenR(_Do, mygroup)
	}
	For(n){//: { init:1, test:1, update:1, loop:1, compr:0 },
		Keyword('for', _For)
		var mygroup = group++
		space()
		ParenL(_For, mygroup)
		expand(n.init)
		SemiColon(_For)
		space()
		expand(n.test)
		SemiColon(_For)
		space()
		expand(n.update)
		ParenR(_For, mygroup)
		if(n.loop.cmu){
			if(Comments(n.loop.cmu)) tab(indent+1)
		}
		else if(n.loop.type != 'Block') space()
		expand(n.loop)
	}
	ForIn(n){//: { left:1, right:1, loop:1, compr:0 },
		Keyword('for', _For)
		var mygroup = group++
		space()
		ParenL(_For, mygroup)
		expand(n.left)
		space()
		Keyword('in', _For)
		space()
		expand(n.right)
		ParenR(_For, mygroup)
		if(n.loop.cmu){
			if(Comments(n.loop.cmu)) tab(indent+1)
		}
		else if(n.loop.type != 'Block') space()

		expand(n.loop)
	}
	ForOf(n){//: { left:1, right:1, loop:1, compr:0 },
		Keyword('for', _For)
		var mygroup = group++
		space()
		ParenL(_For, mygroup)
		expand(n.left)
		space()
		Keyword('of', _For)
		space()
		expand(n.right)
		ParenR(_For, mygroup)
		if(n.loop.cmu){
			if(Comments(n.loop.cmu)) tab(indent+1)
		}
		else if(n.loop.type != 'Block') space()

		expand(n.loop)
	}
	ForFrom(n){//: { right:1, left:1, loop:1, compr:0 }, // right comes first for type inference
		Keyword('for', _For)
		var mygroup = group++
		space()
		ParenL(_For, mygroup)
		expand(n.left)
		space()
		Keyword('from', _For)
		space()
		expand(n.right)
		ParenR(_For, mygroup)
		if(n.loop.cmu){
			if(Comments(n.loop.cmu)) tab(indent+1)
		}
		else if(n.loop.type != 'Block') space()

		expand(n.loop)
	}
	ForTo(n){//: { left:1, right:1, loop:1, in:1, compr:0 },
		Keyword('for', _For)
		var mygroup = group++
		space()
		ParenL(_For, mygroup)
		expand(n.left)
		space()
		Keyword('to', _For)
		space()
		expand(n.right)
		ParenR(_For, mygroup)
		if(n.loop.cmu){
			if(Comments(n.loop.cmu)) tab(indent+1)
		}
		else if(n.loop.type != 'Block') space()

		expand(n.loop)
	}
	Var(n){//: { defs:2, const:0 },
		Keyword('var', _Var)
		if(n.defs && n.defs.length){
			space()
			for(var i, def from n.defs){
				if(i) Comma(_Var), space()
				expand(def)
			}
		}
	}
	TypeVar(n){//: { typing:1, defs:2, dim:1 },
		//if(n.typing.typing){
		//	expand(n.typing.typing)
		//	space()
		//}
		//Keyword(n.typing.name, _TypeVar)
		expand(n.typing, true)
		space()
		for(var i, def from n.defs){
			if(i) Comma(_Var), space()
			expand(def)
		}
	}
	Struct(n){//: { id:1, struct:1, base:1, defs:2, dim:1 },
		Keyword('struct', _Struct)
		space()
		expand(n.id)
		expand(n.struct)
	}
	Define(n){//: { id:1, value:1 },
		Keyword('define', _Define)
		space()
		expand(n.id)
		if(n.value){
			space()
			expand(n.value)
		}
	}
	Enum(n){//: { id:1, enums:2 }, 
		Keyword('enum', _Enum)
		space()
		expand(n.id)
		BraceL(_Enum)
		newline()
		for(var e from n.enums){
			expand(e)
		}
		BraceR(_Enum)
	}

	Def(n){//: { id:1, init:1, dim:1 },
		expand(n.id)
		if(n.init){
			space()
			Operator('=', _Def, group++)
			space()
			expand(n.init)
		}
	}

	Function(n){//: { id:1, name:1, params:2, rest:1, body:1, arrow:0, gen:0, def:0 },
		if(!n.arrow){
			if(n.name) expand(n.name)
			else if(n.id){
				Keyword('function',_Function)
				space()
				expand(n.id)
			}
		}
		//else Keyword('function', _Function)
		var mygroup = group++
		ParenL(_Function,mygroup)
		if(n.params) for(var i, param from n.params){
			if(i) Comma(_Function), space()
			expand(param)
		}
		if(n.rest){
			if(i) Comma(_Function), space()
			expand(n.rest)
		}
		ParenR(_Function,mygroup)
		if(n.arrow=='=>') Operator('=>',_Function)
		else space()
		expand(n.body)
	}
	Return(n){//: { arg:1 },
		Keyword('return', _Return)
		if(n.arg) space(), expand(n.arg)
	}
	Yield(n){//: { arg:1 },
		Keyword('yield', _Yield)
		if(n.arg) space(), expand(n.arg)
	}
	Await(n){//: { arg:1 },
		Keyword('await', _Await)
		if(n.arg) space(), expand(n.arg)
	}
	Unary(n){//: { op:0, prefix:0, arg:1 },
		if(n.prefix){
			if(n.op.length!=1)
				Keyword(n.op, _Unary), space()
			else
				Operator(n.op, _Unary)
			expand(n.arg)
		}
		else{
			expand(n.arg)
			Operator(n.op, _Unary)
		}
	}
	Binary(n){//: { op:0, prio:0, left:1, right:1 },
		var paren_l = AST.needsParens(n, n.left, true)
		var paren_r = AST.needsParens(n, n.right)
		var mygroup = group++
		if(paren_l) ParenL(_Binary,mygroup)
		expand(n.left)
		if(paren_l) ParenR(_Binary,mygroup)
		var old_indent = indent
		indent++
		if(n.cm1 && Comments(n.cm1,' ')){
			tab(indent)
		}
		else space()
		Operator(n.op, _Binary, group++)
		if(n.cm2 && Comments(n.cm2,' ')){
			tab(indent)
		}
		else space()
		if(paren_r) ParenL(_Binary,mygroup)
		expand(n.right)
		if(paren_r) ParenR(_Binary,mygroup)
		indent = old_indent
	}
	Logic(n){//: { op:0, prio:0, left:1, right:1 },
		var paren_l = AST.needsParens(n, n.left, true)
		var paren_r = AST.needsParens(n, n.right)
		var mygroup = group++
		if(paren_l) ParenL(_Logic,mygroup)
		expand(n.left)
		if(paren_l) ParenR(_Logic,mygroup)
		var old_indent = indent
		indent++
		if(n.cm1 && Comments(n.cm1,' ')){
			tab(indent)
		}
		else space()
		Operator(n.op, _Logic, group++)
		if(n.cm2 && Comments(n.cm2,' ')){
			tab(indent)
		}
		else space()
		if(paren_r) ParenL(_Logic,mygroup)
		expand(n.right)
		if(paren_r) ParenR(_Logic,mygroup)
		indent = old_indent
	}
	Assign(n){//: { op:0, prio:0, left:1, right:1 },
		expand(n.left)
		var old_indent = indent
		indent++
		if(n.cm1 && Comments(n.cm1,' ')){
			tab(indent)
		}
		else space()
		Operator(n.op, _Assign, group++)
		if(n.cm2 && Comments(n.cm2,' ')){
			tab(indent)
		}
		else space()
		expand(n.right)
		indent = old_indent
	}
	Update(n){//: { op:0, prio:0, arg:1, prefix:0 },
		if(prefix)
			Operator(n.op, _Update), expand(n.arg)
		else
			expand(n.arg), Operator(n.op, _Update)
	}
	Condition(n){//: { test:1, then:1, else:1 },
		expand(n.test)
		Operator('?', _Condition)
		expand(n.then)
		Operator(':', _Condition)
		expand(n.else)
	}
	New(n){//: { fn:1, args:2 },
		Keyword('new', _New)
		space()
		expand(n.fn)
		ParenL(_New)
		for(var i, args from n.args){
			if(i) Comma(_New), space()
			expand(args)
		}
		ParenR(_New)
	}

	Call(n){//: { fn:1, args:2 },
		var mygroup = group++
		var fn_t = n.fn.type
		if(fn_t == 'Function' || fn_t == 'List' || fn_t == 'Logic' || fn_t == 'Condition') {
			ParenL(_Call, mygroup)
			expand(n.fn)
			ParenR(_Call, mygroup)
		}
		else expand(n.fn)
		mygroup = group++
		ParenL(_Call, mygroup)
		var hasout = 0 
		var post, type
		for(var len, i, args from n.args){
			if(n.extarg == 'do' && i == len - 1){
				type = 'do'
				post = args
			}
			else if(n.extarg == 'on' && i == 0){
				type = 'on'
				post = args
			}
			else{
				if(hasout) Comma(_Call), space()
				expand(args)
				hasout = 1
			}
		}
		ParenR(_Call, mygroup)
		if(post){
			space()
			Keyword(type, _Call)
			expand(post)
		}
	}

	Nest(n){//: { fn:1, body:1, arrow:0 },
		expand(n.fn)
		expand(n.body)
	}
	Class(n){//: { id:1, base:1, body:1 },
		Keyword('class', _Class)
		space()
		expand(n.id)
		if(n.base){
			space()
			Keyword('extends', _Class)
			space()
			expand(n.base)
		}
		expand(n.body)
	}
	Signal(n){//: { left:1, right:1 },
		expand(n.left)
		Operator(':=', _Signal)
		expand(n.right)
	}
	Quote(n){//: { quote:1 },
		Operator(':', _Quote, group++)
		expand(n.quote)
	}
	AssignQuote(n){//: { left:1, quote:1 },
		expand(n.left)
		Operator(':', _AssignQuote, group++)
		expand(n.quote)
	}
	Rest(n){//: { id:1, dots:0 },
		Operator('...', _Rest, group++)
		expand(n.id)
	}
	Then(n){//: { name:1, do:1 },
	}
	Debugger(n){//: { },
	}
	With(n){//: { object:1, body:1 }
	}

	get ast(v){
		return __ast
	}

	set ast(v){
		__ast = v
		// ok lets turn this AST into an actual codeview.
		if(text_initialized){
			allocText(10000)
			indent = 0
			group = 0
			expand(v)
			if(done)done()
		}
	}

	constructor(){
		ast = __ast
	}

	paint:(vec2 p, dpdx, dpdy, edge){
		//var edge = min(length(dpx))
		int m = tag_mesh[].z
		float selected = tag_mesh[].w
		if(m == 10){
			return vec4(0)
		}
		if(m == 32){
			if(selected < 0.){
				var w = .3
				var h = .13
				var field = box(p, .5-.5*w,.5-.5*h,w,h)
				return vec4(#AF8F7E, smoothstep(.75*edge,-.75*edge,field))
			}
			return vec4(0)
		}
		if(m == 9){ // the screen aligned tab dots
			// make a nice tab line
			//var out = vec4(0)
			if(edge > 0.01){ // pixel drawing
				float py = .5*device.h - pixel vertex.y * floor(device.h * .5) 
				if(p.x > 1.*abs(dpdx.x) && p.x <= 2.*abs(dpdx.x) && mod(py,2.)>1.) return vec4(#445,1.)
			}
			else{ // switch to vector drawing
				var w = .01
				var h = .02
				var field = box(mod(p,vec2(1.,.05)),.5*w,0,w,h)
				var col = vec4(#667, smoothstep(edge,-edge,field))
				if(col.a>0.01)return col
			}

			if(selected < 0.){
				if(edge > 0.02){
					if(p.x > 3.*dpdx.x && p.y >= .5 - .5*dpdy.y && p.y <= .5 + .5*dpdy.y)
						return vec4(#AF8F7E,1.)
					return vec4(0)
				}
				var sz = .01
				var field = line(p, 0., .5-sz, 1., .5-sz, 2.*sz)
				return vec4(#AF8F7E, smoothstep(edge,-edge,field))
			}
			return vec4(0)
		}
		return vec4(-1.)
	}

	style:(vec4 pos){
		//vec4 dtags = vec4(tags[].x, floor(tags[].y / 65536.), mod(floor(tags[].y/256.), 256.), mod(tags[].y, 256.))
		vec4 m = tag_mesh[] // magical comments!
		vec2 mp = tag_pos
		if(m.w < 0.){ // selected
			u_bgcolor = u_markcolor
			//u_subpixel_off = 0.
		}// u_bgcolor = u_markcolor
		//var group = dtags.x
		//var type = dtags.y
		//var sub = dtags.z
		//var part = dtags.w
		int group = m.x
		int type = m.y / 65536.
		int sub = mod(m.y/256., 256.)
		int part = mod(m.y, 256.)
		int unicode = m.z
		if(unicode == 10 || unicode == 32 || unicode == 9) discard
		if(sub == _Paren || sub == _Brace || sub == _Bracket){
			if(sub == _Paren){
				u_color = #white
			}
			else if(sub == _Bracket){
				u_color = #ccc
			}
			else{
				u_color = #white
			}
		}
		else if(sub == _Operator){
			u_color = #ff9d00
		}
		else if(type == _Id){
			u_color = #white
			if(sub == _Color){
				u_color = #pink
			}
		}
		else if(type == _Value){
			if(sub == _String)
				u_color = #0f0
			else
				u_color = #aero
		}
		else if(type == _TypeVar){
			u_color = #00ff00
		}
		else if(type == _Comment){
			u_color = #777
		}
		else if(type == _Class){
			u_color = #ffee7f
		}
		else if(type == _This){
			u_color = #ff7fe1
		}else{
			u_color = #ff9d00
		}
	}
}

class CodeView extends Text{
	load(CodeViewImpl)
	load(CodeViewTypes)
	constructor(){
		Text::constructor()
		CodeViewImpl::constructor()
	}
}