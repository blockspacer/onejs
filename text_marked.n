// Copyright (C) 2014 OneJS
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

import math
import text
import text_tagged
import distfield2d

// text with marker layer and cursor layer
class MarkedTextLayerImpl extends TaggedTextImpl{

	struct marker_t extends geom_t{
		vec2 pos 
		vec4 rect
		vec4 other
		float data
		float corner
	}

	constructor(parent){
		marker_mesh = marker_t[]()
		cursor_mesh = vec4[]()
		TaggedTextImpl::constructor(parent)
	}

	marker_zpos = -2
	vertex: (mesh[].xy+vec2(text_x, text_y)) * (m_world * device.m_camera)
	marker_vertex: vec3(marker_mesh[].pos + vec2(text_x, text_y), marker_zpos) * (m_world * device.m_camera)
	cursor_vertex: vec3(cursor_mesh[].xy + vec2(text_x, text_y), cursor_zpos) * (m_world * device.m_camera)

	u_markcolor = #red

	u_border_radius = 1.5
	u_gloop = 6

	// what i want is a super basic drawing api. how do we do it.
	marker_style:(field, pos){
		return field
	}

	marker_paint:(){
		var pos = marker_mesh[].pos 
		var rect = pixel marker_mesh[].rect
		var rel = pos - rect.xy
		// do pixel antialias calc
		float edge = min(length(vec2(length(dFdx(rel)), length(dFdy(rel)))) * SQRT_1_2,1.)

		vec4 other = pixel marker_mesh[].other
		var px1 = other.x
		var px2 = other.y
		var nx1 = other.z
		var nx2 = other.w
		// main shape
		
		var field = roundbox(rel, 0,0, rect.z, rect.w, u_border_radius)
		if(px1 != px2){
			var field2 = roundbox(rel, px1 - rect.x, -rect.w, px2 - px1, rect.w, u_border_radius)
			field = smoothpoly(field, field2, u_gloop)
		}
		if(nx1 != nx2){
			var field2 = roundbox(rel, nx1 - rect.x, rect.w, nx2 - nx1, rect.w, u_border_radius)
			field = smoothpoly(field, field2, u_gloop)
		}
		
		// we have to shift the edge box to meet the hollow border radius of the next selection
		/*
		var field = roundbox(rel, 0,0, rect.z, rect.w, u_border_radius)
		var correction = u_border_radius*1.9
		// top part shape connection
		if(px1 != px2){
			// we have to know wether we need to extend our border radius
			var base = px1-rect.x
			var leftc = 0.
			var rightc = 0.
			if(px1 > rect.x) leftc = correction
			if(px2 < rect.x + rect.z) rightc = correction
			var corner = 
				subtract(
					union(
						roundbox(rel, rect.z, -.5*edge, 100.,rect.w, u_border_radius),
						roundbox(rel, -100., -.5*edge, 100.,rect.w, u_border_radius)),
					box(rel, base - leftc, -.5*rect.w, (px2-px1) + (leftc+rightc), rect.w)
				)
			// straight corner
			if(px1>rect.x+rect.z) field = union(field,box(rel,rect.z - u_border_radius*2.,0.,u_border_radius*2.,rect.w*.5))
			field = union(field, corner)
		}
		// bottom part shapes
		if(nx1 != nx2){
			var base = nx1-rect.x
			var leftc = 0.
			var rightc = 0.
			if(nx1 > rect.x) leftc = correction
			if(nx2 < rect.x + rect.z) rightc = correction			
			var corner = 
				subtract(
					union(
						roundbox(rel, rect.z, .5*edge, 100.,rect.w, u_border_radius),
						roundbox(rel, -100., .5*edge, 100.,rect.w, u_border_radius)),
					box(rel, base - leftc, rect.w*.5, (nx2-nx1) + (leftc + rightc), rect.w)
				)
			// straight corner
			if(nx2<rect.x) field = union(field,box(rel,0.,rect.w*.5,u_border_radius*2.,rect.w*.5))

			field = union(field, corner)
		}
		*/
		field = marker_style(field, pos)
		var alpha = smoothstep(edge,-edge,field)

		if(alpha<0.001) discard;

		return vec4(u_markcolor, alpha)
	}
	
	mark_pos: vec2(floor(mod(marker_mesh[].corner,2.)), floor(abs(mod(marker_mesh[].corner,4.)/2.)))

	clearMarkers(notags){
		if(marker_mesh.length > 0){
			marker_mesh.length = 0
			if(!notags) clearTagsMarker()
		}
	}

	clearTagsMarker(){
		if(tags_marked){
			tags_marked = false
			vec4[] tags = tag_mesh
			for(var m = tags.quad.length - 1; m >= 0; m--){
				if(tags.quad[m].w<0) tags.quad[m].w *= -1
			}
			tag_mesh.length += 0
		}
	}

	addMarker(prev, self, next, data, notags){
		marker_t[] mrk = marker_mesh

		var o = mrk.quad.length++

		var px1 = 0,px2 = 0,nx1 = 0,nx2 = 0
		if(prev) px1 = prev.x, px2 = prev.x2
		if(next) nx1 = next.x, nx2 = next.x2
		
		mrk.quad[o].data = data
		mrk.quad[o].rect = vec4(self.x, self.y, self.w, self.h)
		mrk.quad[o].other = vec4(px1, px2, nx1, nx2)
		mrk.quad_tl[o].pos = vec2(self.x - font_size * 3, self.y)
		mrk.quad_tl[o].corner = 0
		mrk.quad_tr[o].pos = vec2(self.x2 + font_size * 3, self.y)
		mrk.quad_tr[o].corner = 1
		mrk.quad_bl[o].pos = vec2(self.x - font_size * 3, self.y2)
		mrk.quad_bl[o].corner = 2
		mrk.quad_br[o].pos = vec2(self.x2 + font_size * 3, self.y2)
		mrk.quad_br[o].corner = 3
		if(!notags) setTagsMarker(self)
	}

	setTagsMarker(start, end){
		vec4[] tags = tag_mesh
		tags_marked = true
		// lets also signal the text renderer of our selection
		for(var m = start; m < end; m++){
			if(tags.quad[m].w > 0) tags.quad[m].w *= -1
		}
		// mark it for update
		tags.length += 0
	}

	getMarkers(start, end, array, deltay){
		if(deltay === undefined) deltay = 0
		if(end < start){
			var t = start
			start = end
			end = t
		}
		vec4[] mesh = mesh
		vec4[] tags = tag_mesh
		var m = array
		var length = mesh.quad.length
		if(end > length) end = length

		for(var o = start, last = o; o < end; o++){
			ch = tags.quad[o].z
			if(o == end - 1 || ch == 10){
				var r = cursorRect(last)
				var x = (o+1) == length || ch == 10? mesh.quad_tr[o].x: mesh.quad_tl[o+1].x
				r.start = last
				r.end = o
				r.w = x - r.x
				r.x2 = r.x + r.w
				r.y2 = r.y + r.h
				r.y += deltay
				r.y2 += deltay
				// check if the previous item is on the same r.y
				// ifso fuse it with this marker
				var prev = array[array.length -1]
				if(prev && abs(prev.y-r.y) < 1e-4){ // fuse marker
					prev.x2 = r.x2
					prev.w += r.w
				}
				else
					array.push(r)
				last = o+1
			}
		}
		return array
	}

	addMarkers(start, end, data){
		if(end < start){
			var t = end
			end = start
			start = t
		}
		var array = []
		getMarkers(start, end, array)
		for(var i = 0;i<array.length;i++){
			addMarker(array[i-1], array[i], array[i+1], data)
		}
		return array
	}
	
	clearCursors(){
		cursor_mesh.length = 0
	}

	addCursor(pos, data){
		var rect = cursorRect(pos)
		rect.w = 5
		vec4[] cursor = cursor_mesh
		var o = cursor.quad.length++
		cursor.quad_tl[o] = vec4(rect.x, rect.y, 0, data)
		cursor.quad_tr[o] = vec4(rect.x + rect.w, rect.y, 1, data)
		cursor.quad_bl[o] = vec4(rect.x, rect.y + rect.h, 2, data)
		cursor.quad_br[o] = vec4(rect.x + rect.w, rect.y + rect.h, 3, data)
	}
	
	addCursors(list){
		for(var cursor in list){
			addCursor(cursor.end)
		}
	}

	cursor_paint:(){
		var rel = cursor_pos
		var dpdx = dFdx(rel)
		var dpdy = dFdy(rel)
		var edge = min(length(vec2(length(dpdx), length(dpdy))) * SQRT_1_2, 1.)
		if(edge > 0.04){
			if(rel.x < dpdx.x) return vec4(#white, 1.)
			return vec4(0.)
		}
		return vec4(#white, smoothstep(edge,-edge, box(rel, 0,0,0.1,1.)))
	}

	cursor_zpos = 2.
	cursor_mesh = vec4[]()
	
	cursor_pos: vec2(floor(mod(cursor_mesh[].z,2.)), floor(abs(mod(cursor_mesh[].z,4.)/2.)))

	drawSelf:(sec){
		this{
			pixel:marker_paint()
			vertex:marker_vertex
		}
		this{}
		this{
			pixel:cursor_paint()
			vertex:cursor_vertex
		}
	}
}
